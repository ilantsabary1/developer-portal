openapi: '3.0.0'
servers:
  - url: 'https://api-prod.surfsight.net/{apiVersion}'
    description: 'The production API server.'
    variables:
      apiVersion:
        default: 'v2'
        enum:
          - 'v2'
info:
  version: '2.0.0'
  title: 'Surfsight API'
  contact:
    email: 'support@surfsight.com'
tags:
  - name: 'Alarms'
    description: 'Everything about alarm endpoints.'
  - name: 'Audit logs'
    description: 'Everything about audit log endpoints.'
  - name: 'Authentication'
    description: 'Everything about authentication endpoints.'
  - name: 'Devices'
    description: 'Everything about device endpoints.'
  - name: 'Device Operations'
    description: 'Everything about device operation endpoints.'
  - name: 'Events'
    description: 'Everything about event endpoints.'
  - name: 'Geofences'
    description: 'Everything about geofence endpoints.'
  - name: 'Groups'
    description: 'Everything about group endpoints.'
  - name: 'Health'
    description: 'Everything about health endpoints.'
  - name: 'Organizations'
    description: 'Everything about organization endpoints.'
  - name: 'Partner Operation Statistics'
    description: 'Everything about partner operational statistic endpoints.'
  - name: 'Partners'
    description: 'Everything about partner endpoints.'
  - name: 'Recordings'
    description: 'Everything about recording endpoints.'
  - name: 'Streaming'
    description: 'Everything about streaming endpoints.'
  - name: 'Telemetry'
    description: 'Everything about telemetry endpoints.'
  - name: 'Users'
    description: 'Everything about user endpoints.'
  - name: 'Virtual Event'
    description: 'Everything about virtual event endpoints.'
  - name: 'Webhooks'
    description: 'Everything about webhook endpoints.'
paths:
  /authenticate:
    post:
      tags:
        - 'Authentication'
      description: 'Authenticate the user prior to making other API calls. Insert the bearer token obtained from this call in all other API calls in the HTTPS header in the form of authorization\: bearer {token}. The token is valid for twenty-four hours.'
      summary: 'Authenticate: users'
      operationId: 'postAuthenticate'
      requestBody:
        $ref: '#/components/requestBodies/postAuthenticate'
      responses:
        '200':
          $ref: '#/components/responses/postAuthenticate'
        '400':
          $ref: '#/components/responses/badRequestError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /organizations/{orgId}/bulk-devices:
    post:
      tags:
        - 'Devices'
      description: 'Add devices in bulk.'
      summary: 'Bulk: add devices'
      operationId: 'postBulkDevices'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
      requestBody:
        $ref: '#/components/requestBodies/postBulkDevices'
      responses:
        '200':
          $ref: '#/components/responses/postBulkDevices'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/device-config:
    put:
      tags:
        - 'Devices'
      description: 'Set device settings in bulk, such as turning the in-cabin facing camera or distracted driver functionality on/off.'
      summary: 'Bulk: configure devices'
      operationId: 'putBulkDeviceConfig'
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/putBulkDeviceConfig'
      responses:
        '200':
          $ref: '#/components/responses/putDeviceConfig'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /organizations/{orgId}/devices/{imei}:
    delete:
      tags:
        - 'Devices'
      description: 'Delete a device from an organization.'
      summary: 'Manage: delete device'
      operationId: 'deleteOrganizationDevices'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
        - $ref: '#/components/parameters/imeiPath'
      responses:
        '200':
          $ref: '#/components/responses/deleteOrganizationDevices'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /organizations/{orgId}/devices:
    post:
      tags:
        - 'Devices'
      description: 'Add a device to an organization.'
      summary: 'Manage: add device'
      operationId: 'postOrganizationDevices'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
      requestBody:
        $ref: '#/components/requestBodies/postOrganizationDevices'
      responses:
        '200':
          $ref: '#/components/responses/postOrganizationDevices'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '409':
          $ref: '#/components/responses/conflictError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - 'Devices'
      description: 'Receive a list of all the devices associated with an organization.'
      summary: 'Receive: organization devices'
      operationId: 'getOrganizationDevices'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
        - $ref: '#/components/parameters/groupIdQuery'
        - $ref: '#/components/parameters/nameQuery'
        - $ref: '#/components/parameters/imeiQuery'
        - $ref: '#/components/parameters/locatedQuery'
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/offsetQuery'
      responses:
        '200':
          $ref: '#/components/responses/getOrganizationDevices'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /associated-devices:
    post:
      tags:
        - 'Devices'
      description: 'Receive the IDs of third-party devices associated with your devices.'
      summary: 'Receive: associated devices'
      operationId: 'postAssociatedDevices'
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/postAssociatedDevices'
      responses:
        '200':
          $ref: '#/components/responses/postAssociatedDevices'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '417':
          $ref: '#/components/responses/expectationFailedError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /organizations/{orgId}/devices/calibrate-accelerometer:
    post:
      tags:
        - 'Device Operations'
      description: 'Calibrate single or multiple device accelerometers remotely. The devices must be online.'
      summary: 'Manage: calibrate accelerometers'
      operationId: 'postOrganizationDevicesCalibrateAccelerometer'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
      requestBody:
        $ref: '#/components/requestBodies/postOrganizationDevicesCalibrateAccelerometer'
      responses:
        '200':
          $ref: '#/components/responses/postOrganizationDevicesCalibrateAccelerometer'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/otg-settings:
    post:
      tags:
        - 'Device Operations'
      description: 'Enable or disable OTG for a device. When OTG is enabled, the USB port of the device is enabled. The device must be connected to the cloud service.'
      summary: 'Manage: enable OTG for device'
      operationId: 'postDeviceOtgSettings'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      responses:
        '200':
          $ref: '#/components/responses/postDeviceOtgSettings'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '417':
          $ref: '#/components/responses/expectationFailedError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/format-storage:
    get:
      tags:
        - 'Device Operations'
      description: 'Format the device SD card. The device must be connected to the cloud service.'
      summary: 'Manage: format SD card'
      operationId: 'getDeviceFormatStorage'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceFormatStorage'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '417':
          $ref: '#/components/responses/expectationFailedError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/reboot:
    post:
      tags:
        - 'Device Operations'
      description: 'Reboot the device. The device must be connected to the cloud service.'
      summary: 'Manage: reboot device'
      operationId: 'postDeviceReboot'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      responses:
        '200':
          $ref: '#/components/responses/postDeviceReboot'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/wakeup:
    post:
      tags:
        - 'Device Operations'
      description: 'Wake the device up from standby mode.'
      summary: 'Manage: wake up device'
      operationId: 'postWakeupDevice'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      responses:
        '200':
          $ref: '#/components/responses/postWakeupDevice'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/data-usage:
    get:
      tags:
        - 'Device Operations'
      description: 'Receive the data usage of the device.'
      summary: 'Receive: device data usage'
      operationId: 'getDeviceDataUsage'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceDataUsage'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/cameras:
    get:
      tags:
        - 'Devices'
      description:
        'Receive a list of cameras available for live streaming from a device.<br><br>
        1 - road-facing camera, 2 - in-cabin-facing camera, 50+ - auxiliary cameras.<br><br>
        The device must be online.'
      summary: 'Receive: active cameras'
      operationId: 'getDeviceCameras'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceCameras'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '417':
          $ref: '#/components/responses/expectationFailedError'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      tags:
        - 'Device Operations'
      description: 'Update the name of an auxiliary camera.'
      summary: 'Update: auxiliary camera name'
      operationId: 'patchDeviceCameras'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      requestBody:
        $ref: '#/components/requestBodies/patchDeviceCameras'
      responses:
        '200':
          $ref: '#/components/responses/patchDeviceCameras'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/device-config:
    get:
      tags:
        - 'Devices'
      description: 'Receive a list of the device settings.'
      summary: 'Receive: device settings'
      operationId: 'getDeviceConfig'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceConfig'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - 'Devices'
      description: 'Update the device settings.'
      summary: 'Update: device settings'
      operationId: 'putDeviceConfig'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      requestBody:
        $ref: '#/components/requestBodies/putDeviceConfig'
      responses:
        '200':
          $ref: '#/components/responses/putDeviceConfig'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}:
    get:
      tags:
        - 'Devices'
      description: 'Receive the device metadata. Only partners can make this call.'
      summary: 'Receive: device metadata'
      operationId: getDevice
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      responses:
        '200':
          $ref: '#/components/responses/getDevice'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      tags:
        - 'Devices'
      description: 'Update a device and its various properties.'
      summary: 'Update: device'
      operationId: 'patchDevice'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      requestBody:
        $ref: '#/components/requestBodies/patchDevice'
      responses:
        '200':
          $ref: '#/components/responses/patchDevice'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /organizations:
    post:
      tags:
        - 'Organizations'
      description: 'Create a new organization. Only partners can make this call.'
      summary: 'Manage: create organization'
      operationId: 'postOrganization'
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/postOrganization'
      responses:
        '200':
          $ref: '#/components/responses/postOrganization'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - 'Organizations'
      security:
        - bearerAuth: []
      description: 'Receive a list of the organizations belonging to the current authenticated entity.'
      summary: 'Receive: list of organizations'
      operationId: 'getOrganizations'
      responses:
        '200':
          $ref: '#/components/responses/getOrganizations'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /organizations/sso:
    get:
      tags:
        - 'Organizations'
      security:
        - bearerAuth: []
      description: |
        Request a user token to authenticate the organization. A valid JWT token must be provided in the authorization header.
        Insert the token obtained from this call in your other calls in the https header in the form of authorization: Bearer {token}.<br><br>
        Only partners can make this call.
      summary: 'Receive: organization SSO'
      operationId: 'getOrganizationSso'
      responses:
        '200':
          $ref: '#/components/responses/getOrganizationSso'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /organizations/{orgId}:
    get:
      tags:
        - 'Organizations'
      description: 'Receive the details of an organization.'
      summary: 'Receive: organization details'
      operationId: 'getOrganization'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
      responses:
        '200':
          $ref: '#/components/responses/getOrganization'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      tags:
        - 'Organizations'
      description: 'Update an organization and its properties. Only partners can make this call.'
      summary: 'Update: organization'
      operationId: 'patchOrganization'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
      requestBody:
        $ref: '#/components/requestBodies/patchOrganization'
      responses:
        '200':
          $ref: '#/components/responses/patchOrganization'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /organizations/{orgId}/users:
    post:
      tags:
        - 'Users'
      security:
        - bearerAuth: []
      description: 'Create a user within an organization.'
      summary: 'Manage: create user'
      operationId: postOrganizationUsers
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
      requestBody:
        $ref: '#/components/requestBodies/postOrganizationUsers'
      responses:
        '200':
          $ref: '#/components/responses/postOrganizationUsers'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /partners/{partnerId}/contacts/{partnerContactId}:
    delete:
      tags:
        - 'Partners'
      description: 'Delete a partner contact.'
      summary: 'Manage: delete partner contact'
      operationId: 'deletePartnerContacts'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partnerIdPath'
        - $ref: '#/components/parameters/partnerContactIdPath'
      responses:
        '200':
          $ref: '#/components/responses/deletePartnerContacts'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    patch:
      tags:
        - 'Partners'
      description: 'Edit the partner contact.'
      summary: 'Manage: edit partner contact'
      operationId: 'patchPartnerContacts'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partnerIdPath'
        - $ref: '#/components/parameters/partnerContactIdPath'
      responses:
        '200':
          $ref: '#/components/responses/patchPartnerContacts'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /partners/{partnerId}/contacts:
    post:
      tags:
        - 'Partners'
      description: 'Create a new partner contact.'
      summary: 'Manage: create partner contact'
      operationId: 'postPartnerContacts'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partnerIdPath'
      requestBody:
        $ref: '#/components/requestBodies/postPartnerContacts'
      responses:
        '200':
          $ref: '#/components/responses/postPartnerContacts'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - 'Partners'
      description: 'Receive a list of partner contacts'
      summary: 'Receive: partner contacts'
      operationId: 'getPartnerContacts'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partnerIdPath'
      responses:
        '200':
          $ref: '#/components/responses/getPartnerContacts'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /partner-contacts:
    get:
      tags:
        - 'Partners'
      description: "Receive a list of partner contacts, along with the partner's own details."
      summary: 'Receive: partner and contacts'
      operationId: 'getCurrentPartnerContacts'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getCurrentPartnerContacts'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /me:
    get:
      tags:
        - 'Partners'
        - 'Users'
      description: "Receive the current authenticated entity's information."
      summary: 'Receive: personal information'
      operationId: 'getMe'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getMe'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/cameras/{cameraId}/snapshot:
    get:
      tags:
        - 'Recordings'
      description: 'Receive a snapshot from a specific camera. The snapshot captures a picture of the camera’s current view. The camera must be online.'
      summary: 'Receive: camera snapshot'
      operationId: 'getDeviceCameraSnapshot'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
        - $ref: '#/components/parameters/cameraIdPath'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceCameraSnapshot'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/recording-ranges:
    get:
      tags:
        - 'Recordings'
      description: 'Receive a list of available recordings from every camera of a device in a given time range.'
      summary: 'Receive: recordings availability'
      operationId: 'getDeviceRecordingRanges'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
        - $ref: '#/components/parameters/startQuery'
        - $ref: '#/components/parameters/endQuery'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceRecordingRanges'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/retention-config:
    get:
      tags:
        - 'Recordings'
      description: 'Receive the cyclic recording retention time, in minutes, for each camera of a device. The cyclic retention time is the amount of time that recordings are kept on the SD card before the first recording is removed to make space for a new recording.'
      summary: 'Receive: recording retention time'
      operationId: 'getDeviceRetentionConfig'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceRetentionConfig'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - 'Recordings'
      description:
        'Update the cyclic recording retention time, in minutes, for each camera of a device. The cyclic retention time is the amount of time that recordings are kept on the SD card before the first recording is removed to make space for a new recording.<br><br>
        The retention time set from this call is saved even when the device is reset.'
      summary: 'Update: recording retention time'
      operationId: 'putDeviceRetentionConfig'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      requestBody:
        $ref: '#/components/requestBodies/putDeviceRetentionConfig'
      responses:
        '200':
          $ref: '#/components/responses/putDeviceRetentionConfig'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/virtual-event:
    post:
      tags:
        - 'Virtual Event'
      description: >
        Generate a virtual event, where media (a video or an image)
        is uploaded to the cloud. If the "cameraId" parameter is used, the
        event will only have media from that camera.
      summary: 'Manage: generate virtual event'
      operationId: 'postVirtualEvent'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      requestBody:
        $ref: '#/components/requestBodies/postVirtualEvent'
      responses:
        '200':
          $ref: '#/components/responses/postVirtualEvent'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '417':
          $ref: '#/components/responses/expectationFailedError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/event-config:
    put:
      tags:
        - 'Events'
      description: 'Set the events settings in bulk for devices. Provide either a list of IMEIs or group IDs.'
      summary: 'Bulk: configure events settings'
      operationId: 'putBulkEventConfig'
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/putBulkEventConfig'
      responses:
        '200':
          $ref: '#/components/responses/putBulkEventConfig'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/events/{eventId}:
    delete:
      tags:
        - 'Events'
      description: 'Delete an event.'
      summary: 'Manage: delete event'
      operationId: 'deleteDeviceEvent'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
        - $ref: '#/components/parameters/eventIdPath'
      responses:
        '200':
          $ref: '#/components/responses/deleteDeviceEvent'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - 'Events'
      description: 'Receive an event.'
      summary: 'Receive: event'
      operationId: 'getDeviceEvent'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
        - $ref: '#/components/parameters/eventIdPath'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceEvent'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/event-file-link:
    get:
      tags:
        - 'Events'
      description:
        'Receive the link to an event file generated by the device. The URL remains active for several minutes to a few hours.<br><br>
        This API can be used in two ways:<br><br>
        1. For events in a given period of time. The files can then be downloaded. All the information required for this call is available in the event object received from the GET /devices/{imei}/events call<br><br>
        2. For virtual events, without using the GET /devices/{imei}/events call. You need additional information, such as the virtual event configuration on your device and the IDs of the cameras connected to the device'
      summary: 'Receive: file link'
      operationId: 'getDeviceEventFileLink'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
        - $ref: '#/components/parameters/fileIdQuery'
        - $ref: '#/components/parameters/fileTypeQuery'
        - $ref: '#/components/parameters/cameraIdQuery'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceEventFileLink'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/events:
    get:
      tags:
        - 'Events'
      description: 'Receive a list of events in a given time range. The retention period for events is thirty days.'
      summary: 'Receive: list of events'
      operationId: 'getDeviceEvents'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
        - $ref: '#/components/parameters/startQuery'
        - $ref: '#/components/parameters/endQuery'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceEvents'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/event-config:
    get:
      tags:
        - 'Events'
      description: 'Receive the events settings of a device.'
      summary: 'Receive: events settings'
      operationId: 'getEventConfig'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      responses:
        '200':
          $ref: '#/components/responses/getEventConfig'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - 'Events'
      description: 'Set the events settings for a device.'
      summary: 'Set: events settings'
      operationId: 'putEventConfig'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      requestBody:
        $ref: '#/components/requestBodies/putEventConfig'
      responses:
        '200':
          $ref: '#/components/responses/putEventConfig'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/geofences:
    put:
      tags:
        - 'Geofences'
      description: 'Set a geofence for a device.'
      summary: 'Manage: set geofence'
      operationId: 'setDeviceGeoFences'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      requestBody:
        $ref: '#/components/requestBodies/setDeviceGeoFences'
      responses:
        '200':
          $ref: '#/components/responses/setDeviceGeoFences'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - 'Geofences'
      description: 'Receive a list of all the configured geofences of a device.'
      summary: 'Receive: list of geofences'
      operationId: 'getDeviceGeoFences'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceGeoFences'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/connect-media:
    post:
      tags:
        - 'Streaming'
      description: |
        Receive the URL to retrieve a recording or live video and the authentication token
        required for the URL. The token is valid for thirty minutes. Make this call again if your device does not start streaming within two minutes.
      summary: 'Prepare: media streaming'
      operationId: 'postDeviceConnectMedia'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      responses:
        '200':
          $ref: '#/components/responses/postDeviceConnectMedia'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/{cameraId}/telemetry:
    get:
      tags:
        - 'Telemetry'
      description: >
        Receive the telemetry data of a device's camera.
      summary: 'Receive: camera telemetry data'
      operationId: 'getDeviceCameraTelemetry'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
        - $ref: '#/components/parameters/cameraIdPath'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceCameraTelemetry'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '417':
          $ref: '#/components/responses/expectationFailedError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/telemetry:
    get:
      tags:
        - 'Telemetry'
      description: >
        Receive the telemetry data of a device. The device must be online.
      summary: 'Receive: device telemetry data'
      operationId: 'getDeviceTelemetry'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceTelemetry'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '417':
          $ref: '#/components/responses/expectationFailedError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/gps:
    get:
      tags:
        - 'Telemetry'
      description: 'Receive the GPS data of a device in a given time range.'
      summary: 'Receive: GPS data'
      operationId: 'getDeviceGps'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
        - $ref: '#/components/parameters/startQuery'
        - $ref: '#/components/parameters/endQuery'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceGps'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /devices/{imei}/trips:
    get:
      tags:
        - 'Telemetry'
      description: 'Receive a list of trips for a device in a given time range. The retention period of trips data is thirty days'
      summary: 'Receive: list of trips'
      operationId: 'getDeviceTrips'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/imeiPath'
        - $ref: '#/components/parameters/startQuery'
        - $ref: '#/components/parameters/endQuery'
      responses:
        '200':
          $ref: '#/components/responses/getDeviceTrips'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /organizations/{orgId}/groups/{groupId}/devices:
    post:
      tags:
        - 'Groups'
      description:
        'Add devices to a group. Only devices that belong to the associated organization can be added to a group.
        If the device belongs to a different group, it is removed from that group and added to the new group.'
      summary: 'Manage: add devices to group'
      operationId: 'postOrganizationGroupDevices'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
        - $ref: '#/components/parameters/groupIdPath'
      requestBody:
        $ref: '#/components/requestBodies/postOrganizationGroupDevices'
      responses:
        '200':
          $ref: '#/components/responses/postOrganizationGroupDevices'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /organizations/{orgId}/groups:
    post:
      tags:
        - 'Groups'
      description: 'Create a new group in an organization.'
      summary: 'Manage: create group'
      operationId: 'postOrganizationGroups'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
      requestBody:
        $ref: '#/components/requestBodies/postOrganizationGroups'
      responses:
        '200':
          $ref: '#/components/responses/postOrganizationGroups'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - 'Groups'
      description: 'Receive a list of all the groups in an organization.'
      summary: 'Receive: list of organization groups'
      operationId: 'getOrganizationGroups'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
      responses:
        '200':
          $ref: '#/components/responses/getOrganizationGroups'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /audit-logs:
    get:
      tags:
        - 'Audit logs'
      description: 'Receive the audit logs of an organization.'
      summary: 'Receive: organization audit logs'
      operationId: 'getAuditLogs'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/offsetQuery'
        - $ref: '#/components/parameters/startQuery'
        - $ref: '#/components/parameters/endQuery'
        - $ref: '#/components/parameters/userIdQuery'
        - $ref: '#/components/parameters/partnerIdQuery'
        - $ref: '#/components/parameters/organizationIdQuery'
        - $ref: '#/components/parameters/imeiQuery'
      responses:
        '200':
          $ref: '#/components/responses/getAuditLogs'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /organizations/{orgId}/webhooks/{webhookId}:
    delete:
      tags:
        - 'Webhooks'
      description: 'Delete a webhook from an organization.'
      summary: 'Manage: delete webhook'
      operationId: 'deleteOrganizationWebhooks'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
        - $ref: '#/components/parameters/webhookIdPath'
      responses:
        '200':
          $ref: '#/components/responses/deleteOrganizationWebhooks'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /organizations/{orgId}/webhooks:
    post:
      tags:
        - 'Webhooks'
      description: 'Add a device to the webhook subscription.'
      summary: 'Manage: add device to webhook subscription'
      operationId: 'postOrganizationWebhook'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
      requestBody:
        $ref: '#/components/requestBodies/postOrganizationWebhook'
      responses:
        '200':
          $ref: '#/components/responses/postOrganizationWebhook'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - 'Webhooks'
      description: >
        Replace the entire list of devices subscribed to webhooks with a new list of devices.
      summary: 'Manage: replace webhooks subscription devices'
      operationId: 'putOrganizationWebhooks'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
      requestBody:
        $ref: '#/components/requestBodies/putOrganizationWebhooks'
      responses:
        '200':
          $ref: '#/components/responses/putOrganizationWebhooks'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - 'Webhooks'
      description: 'Receive a list of the webhooks configured for an organization.'
      summary: 'Receive: organization webhooks'
      operationId: 'getOrganizationWebhooks'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/orgIdPath'
      responses:
        '200':
          $ref: '#/components/responses/getOrganizationWebhooks'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /recipients/health/{recipientId}:
    delete:
      tags:
        - 'Health'
      description: 'Delete an email address to which health reports are sent.'
      summary: 'Manage: delete health report email recipient'
      operationId: 'deleteHealthRecipient'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/recipientIdPath'
      responses:
        '200':
          $ref: '#/components/responses/deleteHealthRecipient'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /recipients/health:
    post:
      tags:
        - 'Health'
      description: 'Add an email address to which health reports are sent. Emails are sent at a set interval.'
      summary: 'Manage: add health report email recipient'
      operationId: 'postHealthRecipient'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partnerOrganizationIdQuery'
      requestBody:
        $ref: '#/components/requestBodies/postHealthRecipient'
      responses:
        '200':
          $ref: '#/components/responses/postHealthRecipient'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - 'Health'
      description: 'Receive a list of the email addresses to which health reports are sent. Partners can receive a list of email addresses for a specific organization by providing the organization ID.'
      summary: 'Receive: list of health report email recipients'
      operationId: 'getHealthRecipients'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partnerOrganizationIdQuery'
      responses:
        '200':
          $ref: '#/components/responses/getHealthRecipients'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /device-health:
    get:
      tags:
        - 'Health'
      description: 'Receive the health reports of your devices. Partners can receive the health reports of a specific organization by providing the organization ID.'
      summary: 'Receive: health reports'
      operationId: 'getDevicesHealth'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/offsetQuery'
        - $ref: '#/components/parameters/lastConnectedAtStartQuery'
        - $ref: '#/components/parameters/lastConnectedAtEndQuery'
        - $ref: '#/components/parameters/lastRecordingUpdatedAtStartQuery'
        - $ref: '#/components/parameters/lastRecordingUpdatedAtEndQuery'
        - $ref: '#/components/parameters/lastRecordingHealthQuery'
        - $ref: '#/components/parameters/partnerOrganizationIdQuery'
        - $ref: '#/components/parameters/imeiQuery'
        - $ref: '#/components/parameters/nameQuery'
        - $ref: '#/components/parameters/deviceHealthSortQuery'
        - $ref: '#/components/parameters/orderQuery'
      responses:
        '200':
          $ref: '#/components/responses/getDevicesHealth'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /alarms/{alarmId}/actions:
    post:
      tags:
        - 'Alarms'
      description: 'Add an action to an alarm. Actions include: "read", "close", "open".'
      summary: 'Manage: add action'
      operationId: 'postAlarmAction'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/alarmIdPath'
      requestBody:
        $ref: '#/components/requestBodies/postAlarmAction'
      responses:
        '200':
          $ref: '#/components/responses/postAlarmAction'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /alarms/{alarmId}/comments:
    post:
      tags:
        - 'Alarms'
      description: 'Add a comment to an alarm.'
      summary: 'Manage: add comment'
      operationId: 'postAlarmComment'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/alarmIdPath'
      requestBody:
        $ref: '#/components/requestBodies/postAlarmComment'
      responses:
        '200':
          $ref: '#/components/responses/postAlarmComment'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /recipients/alarms/{recipientId}:
    patch:
      tags:
        - 'Alarms'
      description: 'Update the settings of the alarms report email recipient.'
      summary: 'Manage email recipients: update recipient settings'
      operationId: 'patchAlarmsRecipient'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/recipientIdPath'
      requestBody:
        $ref: '#/components/requestBodies/patchAlarmsRecipient'
      responses:
        '200':
          $ref: '#/components/responses/patchAlarmsRecipient'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '500':
          $ref: '#/components/responses/internalServerError'
    delete:
      tags:
        - 'Alarms'
      description: 'Delete an email address to which the alarms report is sent.'
      summary: 'Manage email recipients: delete recipient'
      operationId: 'deleteAlarmsRecipient'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/recipientIdPath'
      responses:
        '200':
          $ref: '#/components/responses/deleteAlarmsRecipient'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /recipients/alarms:
    post:
      tags:
        - 'Alarms'
      description: 'Add an email address to which alarms reports are sent. Emails are sent at a set interval. Partners can add alarms recipient specific to an organization by providing the organization ID.'
      summary: 'Manage email recipients: add recipient'
      operationId: 'postAlarmsRecipient'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partnerOrganizationIdQuery'
      requestBody:
        $ref: '#/components/requestBodies/postAlarmsRecipient'
      responses:
        '200':
          $ref: '#/components/responses/postAlarmsRecipient'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '500':
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - 'Alarms'
      description: 'Receive a list of email addresses to which alarms reports are sent. Partners can receive a list of email addresses from a specific organization by providing the organization ID.'
      summary: 'Receive: alarms report email recipients'
      operationId: 'getAlarmsRecipients'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/partnerOrganizationIdQuery'
      responses:
        '200':
          $ref: '#/components/responses/getAlarmsRecipients'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /alarms:
    get:
      tags:
        - 'Alarms'
      description: 'Receive a list of the alarms from your devices. Partners can receive a list of alarms from a specific organization by providing the organization ID.'
      summary: 'Receive: alarms report'
      operationId: 'getAlarms'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/offsetQuery'
        - $ref: '#/components/parameters/partnerOrganizationIdQuery'
        - $ref: '#/components/parameters/imeiQuery'
        - $ref: '#/components/parameters/nameQuery'
        - $ref: '#/components/parameters/alarmDefinitionNameQuery'
        - $ref: '#/components/parameters/alarmDefinitionSeverityQuery'
        - $ref: '#/components/parameters/readFilterQuery'
        - $ref: '#/components/parameters/unreadFilterQuery'
        - $ref: '#/components/parameters/openFilterQuery'
        - $ref: '#/components/parameters/closeFilterQuery'
        - $ref: '#/components/parameters/alarmsSortQuery'
        - $ref: '#/components/parameters/orderQuery'
      responses:
        '200':
          $ref: '#/components/responses/getAlarms'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /alarms/{alarmId}:
    get:
      tags:
        - 'Alarms'
      description: 'Receive the details of an alarm.'
      summary: 'Receive: alarm details'
      operationId: 'getAlarm'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/alarmIdPath'
      responses:
        '200':
          $ref: '#/components/responses/getAlarm'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
  /partners/operational-statistics:
    get:
      tags:
        - 'Partner Operation Statistics'
      description: 'Receive the operational statistics of a partner’s devices and organizations. Only partners can make this call.'
      summary: 'Receive: partner operational statistics'
      operationId: 'getPartnerOperationalStatistics'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/previousMonthsQuery'
        - $ref: '#/components/parameters/previousWeeksQuery'
      responses:
        '200':
          $ref: '#/components/responses/getPartnerOperationalStatistics'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '500':
          $ref: '#/components/responses/internalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  requestBodies:
    putDeviceRetentionConfig:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - config
            properties:
              config:
                $ref: '#/components/schemas/retentionConfig'
    patchDevice:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                $ref: '#/components/schemas/deviceName'
    postAuthenticate:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                $ref: '#/components/schemas/email'
              password:
                $ref: '#/components/schemas/password'
    postOrganizationUsers:
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
              - role
            properties:
              email:
                $ref: '#/components/schemas/email'
              password:
                $ref: '#/components/schemas/password'
              role:
                $ref: '#/components/schemas/role'
    postOrganizationDevicesCalibrateAccelerometer:
      content:
        application/json:
          schema:
            type: object
            properties:
              imeis:
                type: array
                description: 'The IMEI numbers of the devices you want to calibrate. The IMEI number can be found on a sticker on the device itself or on the back of the device box.'
                items:
                  $ref: '#/components/schemas/imei'
              groups:
                type: array
                description: 'The group IDs of the device groups you want to calibrate. Obtain group IDs from GET /organizations/{orgId}/devices.'
                items:
                  $ref: '#/components/schemas/groupId'
              ungrouped:
                type: boolean
                description: 'Calibrate any devices that do not belong to a group. Find out which devices do not belong to a group from GET /organizations/{orgId}/devices,'
    postBulkDevices:
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - imei
                - name
              properties:
                imei:
                  $ref: '#/components/schemas/imei'
                name:
                  $ref: '#/components/schemas/deviceName'
                groupId:
                  $ref: '#/components/schemas/groupId'
    postVirtualEvent:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - time
            properties:
              time:
                description: 'Event date and time, in ISO 8601 format.'
                $ref: '#/components/schemas/time'
              mediaType:
                description: 'The type of media uploaded.'
                type: string
                default: video
                enum:
                  - video
                  - snapshot
              durationSeconds:
                description: 'The length of the video, in seconds. Only applies to the video mediaType.'
                type: number
                minimum: 1
                maximum: 86400
              quality:
                description: 'The quality of of the video.'
                type: string
                enum:
                  - standard
                  - high
              cameraId:
                description: 'The ID of the camera.<br><br>
                  1 - road-facing camera, 2 - in-cabin-facing camera, 50+ - auxiliary cameras.'
                type: number
              metadata:
                description: 'The metadata of the event.'
                type: string
    putBulkEventConfig:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/putBulkEventConfigImeis'
              - $ref: '#/components/schemas/putBulkEventConfigGroups'
    putEventConfig:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/eventConfig'
    putDeviceConfig:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/deviceConfig'
    putBulkDeviceConfig:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/putBulkDeviceConfigOrganization'
              - $ref: '#/components/schemas/putBulkDeviceConfigImeis'
    setDeviceGeoFences:
      required: true
      content:
        application/json:
          schema:
            type: array
            description: 'The geofence event configurations array.'
            items:
              $ref: '#/components/schemas/geofence'
    postAssociatedDevices:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              imeis:
                type: array
                description: 'The IMEI numbers. The IMEI number can be found on a sticker on the device itself or on the back of the device box.'
                items:
                  $ref: '#/components/schemas/imei'
    postPartnerContacts:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/partnerContact'
              - type: object
                required:
                  - password
                properties:
                  password:
                    $ref: '#/components/schemas/password'
    postOrganizationDevices:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/device'
    postOrganizationGroups:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/groupToCreate'
    postOrganizationGroupDevices:
      required: true
      content:
        application/json:
          schema:
            type: array
            description: 'The IMEI numbers of devices that are added
              to the group array. If any devices already belong to other groups,
              they are removed from the original groups.'
            items:
              $ref: '#/components/schemas/imei'
    postOrganizationWebhook:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/webhook'
    putOrganizationWebhooks:
      required: true
      content:
        application/json:
          schema:
            type: array
            description: 'The webhooks array.'
            items:
              $ref: '#/components/schemas/webhook'
    postOrganization:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: 'The name you assign to the organization.'
    patchOrganization:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                $ref: '#/components/schemas/organizationName'
              purgeDays:
                $ref: '#/components/schemas/organizationPurgeDays'
              purgeDaysFrontCamera:
                $ref: '#/components/schemas/organizationPurgeDays'
              purgeDaysRearCamera:
                $ref: '#/components/schemas/organizationPurgeDays'
              purgeDaysAuxiliaryCameras:
                $ref: '#/components/schemas/organizationPurgeDays'
    patchDeviceCameras:
      description: 'A list of objects containing auxiliary camera IDs and names.'
      required: true
      content:
        application/json:
          schema:
            type: array
            description: 'The auxiliary cameras array.'
            uniqueItems: true
            minItems: 1
            maxItems: 10
            items:
              type: object
              required:
                - cameraId
                - name
              properties:
                cameraId:
                  $ref: '#/components/schemas/cameraId'
                name:
                  type: string
                  description: 'The name you assign to the auxiliary camera.'
                  minimum: 1
                  maximum: 191
                  nullable: true
    postHealthRecipient:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/healthRecipient'
    postAlarmAction:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/alarmAction'
    postAlarmComment:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/alarmComment'
    postAlarmsRecipient:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/alarmsRecipient'
    patchAlarmsRecipient:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: 'Update alarms report email recipients object.'
            properties:
              reportIntervalSeconds:
                $ref: '#/components/schemas/alarmsReportIntervalSeconds'
              alarmDefinitions:
                type: array
                description: 'The alarm definitions array.'
                items:
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      type: number
                      description: 'The ID of the alarm definition.'
                      example: 625
  responses:
    patchDeviceCameras:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    postAuthenticate:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: object
                description: 'The authentication response object.'
                properties:
                  token:
                    $ref: '#/components/schemas/token'
                  organizationId:
                    $ref: '#/components/schemas/organizationId'
    postOrganizationDevicesCalibrateAccelerometer:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    patchDevice:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    getDevice:
      description: 'Receive the device metadata.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - requestId
            properties:
              data:
                allOf:
                  - $ref: '#/components/schemas/extendedDevice'
                  - type: object
                    required:
                      - organiazationId
                    properties:
                      organizationId:
                        $ref: '#/components/schemas/organizationId'
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    putDeviceRetentionConfig:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    getDeviceRetentionConfig:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                description: 'The recording retention time response object.'
                required:
                  - config
                properties:
                  config:
                    $ref: '#/components/schemas/retentionConfig'
    getDeviceCameras:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: array
                description: 'The receive active cameras response array.'
                items:
                  type: object
                  properties:
                    cameraId:
                      $ref: '#/components/schemas/cameraId'
    getDeviceCameraSnapshot:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: string
                description: 'The URL from which to download the requested snapshot.'
                example: 'https://sample.s3.aws.com/123/123.mp4?access_key=1234'
    getDeviceDataUsage:
      description: 'Successful operation'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/deviceDataUsage'
    postWakeupDevice:
      description: 'Successful operation'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    getDeviceRecordingRanges:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: array
                description: 'The receive recordings availability response array.'
                items:
                  $ref: '#/components/schemas/cameraRangeObject'
    deletePartnerContacts:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    patchPartnerContacts:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    postPartnerContacts:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/extendedPartnerContact'
    postVirtualEvent:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    putBulkEventConfig:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    putEventConfig:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    getEventConfig:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                title: 'Events configuration object'
                description: 'The events settings configuration of the device object.'
                type: object
                required:
                  - vehicleType
                  - events
                properties:
                  vehicleType:
                    $ref: '#/components/schemas/vehicleType'
                  events:
                    type: array
                    description: 'The enabled events array. Any event types that are not in this list are disabled.'
                    items:
                      $ref: '#/components/schemas/eventObject'
    putDeviceConfig:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    getDeviceConfig:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/deviceConfig'
    postBulkDevices:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                description: 'The bulk add devices response array.'
                properties:
                  accepted:
                    type: array
                    description: 'A list of the device IMEIs that are accepted.'
                    items:
                      $ref: '#/components/schemas/imei'
                  rejected:
                    type: array
                    description: 'A list of the device IMEIs that are rejected.'
                    items:
                      $ref: '#/components/schemas/imei'
    postDeviceReboot:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    postDeviceOtgSettings:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - enabled
            properties:
              enabled:
                description: 'If OTG is enabled for the device or not.'
                type: boolean
    postAssociatedDevices:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                description: 'The receive list of associated devices response object.'
                type: array
                items:
                  $ref: '#/components/schemas/associatedDevices'
    getDeviceFormatStorage:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    postDeviceConnectMedia:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/connectMedia'
    getDeviceEvents:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                description: 'The receive list of events response array.'
                type: array
                items:
                  $ref: '#/components/schemas/event'
    getDeviceEvent:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/event'
    deleteDeviceEvent:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/eventDeleted'
    getDeviceGeoFences:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                description: 'The receive list of geofences response array.'
                type: array
                items:
                  $ref: '#/components/schemas/geofence'
    setDeviceGeoFences:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    getDeviceEventFileLink:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                description: 'The receive link to file response object.'
                type: object
                required:
                  - url
                properties:
                  url:
                    type: string
                    description: 'The URL from which to download the requested file.'
                    example: 'https://sample.s3.aws.com/123/123.mp4?access_key=1234'
    getDeviceTrips:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                description: 'The receive list of trips response array.'
                type: array
                items:
                  $ref: '#/components/schemas/trip'
    getDeviceGps:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: array
                description: 'The receive GPS data response array.'
                items:
                  $ref: '#/components/schemas/gpsPoint'
    getDeviceTelemetry:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/deviceTelemetry'
    getDeviceCameraTelemetry:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/deviceCameraTelemetry'
    getOrganizationDevices:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                description: 'The receive organization devices response array.'
                type: array
                items:
                  $ref: '#/components/schemas/extendedDevice'
              metadata:
                $ref: '#/components/schemas/metadata'
    getOrganizationSso:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - token
            properties:
              token:
                description: 'The authentication token. Insert in the authorization header of other API calls. Valid for twenty four hours.'
                type: string
    getOrganizations:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                description: 'The receive list of organizations response array.'
                type: array
                items:
                  $ref: '#/components/schemas/extendedOrganization'
    getMe:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                description: 'The receive personal information response object.'
                type: object
                required:
                  - me
                  - entity
                properties:
                  me:
                    description: 'The personal information object.'
                    oneOf:
                      - $ref: '#/components/schemas/partner'
                      - $ref: '#/components/schemas/user'
                  entity:
                    $ref: '#/components/schemas/entity'
    getOrganization:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/extendedOrganization'
    getAuditLogs:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - metadata
            properties:
              data:
                description: 'The receive organization audit logs response array.'
                type: array
                items:
                  $ref: '#/components/schemas/auditLog'
              metadata:
                $ref: '#/components/schemas/metadata'
    getOrganizationGroups:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                description: 'The receive organization groups response array.'
                type: array
                items:
                  $ref: '#/components/schemas/group'
    postOrganizationDevices:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    postOrganizationGroups:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    postOrganizationGroupDevices:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    postOrganization:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            description: 'The create new organization response object.'
            type: object
            required:
              - organizationId
              - ssoSecret
            properties:
              organizationId:
                $ref: '#/components/schemas/organizationId'
              ssoSecret:
                type: string
                description: >
                  The SSO secret verifies the authenticity of HTTP post events subscribed to this organization.<br><br>
                  The X-Surfsight-Signature Header is added to every HTTP post sent for subscriptions.<br><br>
                  This signature is dependent on the destination URL, ssoSecret, and the content of the request body. Every request signature is unique.<br><br>
                  You can verify the authenticity of the HTTP post by creating the same signature and comparing the result with the X-Surfsight-Signature Header as shown below.<br><br>
                  The signature is created with the Hmac – sha512 algorithm, applied directly on the ssoSecret, cyphered/encoded with a stringified request body + destination URL, and converted to hexa-decimal encoding.<br><br>
                  For example, using the crypto package:<br><br>
                  Signature = crypto.createHmac(sha512, mySsoSecret).update(Json.stringify(request.body) + URL ).digest(hex)<br><br>
                  The outcome for ‘Signature’ should look like:<br><br>
                  29c4198c5e3da799887deaf0b0450bac8880efc0769cb79b97138ce9888a4308c7211415879152fdc4a14933c77cd4d531e71a29008214360ce340ccf49b87c8<br><br>
                  You can verify the authenticity of the HTTP post by creating the same signature and comparing the result with the X-Surfsight-Signature Header.
    patchOrganization:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    getOrganizationWebhooks:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            description: 'The receive organization webhooks response object.'
            type: object
            required:
              - data
            properties:
              data:
                type: array
                description: 'The webhooks configured for the
                  organization array.'
                items:
                  $ref: '#/components/schemas/webhook'
    postOrganizationWebhook:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    putOrganizationWebhooks:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    deleteOrganizationWebhooks:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    deleteOrganizationDevices:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    postOrganizationUsers:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    getCurrentPartnerContacts:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            description: 'The receive partner and contacts response object.'
            type: object
            required:
              - data
            properties:
              data:
                description: 'The partner contact response array.'
                type: array
                items:
                  $ref: '#/components/schemas/extendedPartnerContact'
    getPartnerContacts:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                description: 'The receive partner contacts response array.'
                type: array
                items:
                  $ref: '#/components/schemas/extendedPartnerContact'
    getDevicesHealth:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - metadata
            properties:
              data:
                description: 'The receive health reports response array.'
                type: array
                items:
                  $ref: '#/components/schemas/deviceHealth'
              metadata:
                $ref: '#/components/schemas/metadata'
    getHealthRecipients:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                description: 'The receive list of health report email recipients response array.'
                type: array
                items:
                  $ref: '#/components/schemas/extendedHealthRecipient'
    postHealthRecipient:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/extendedHealthRecipient'
    deleteHealthRecipient:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    getAlarms:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            description: 'The receive alarms report response object.'
            type: object
            required:
              - data
              - metadata
            properties:
              data:
                description: 'The alarm data array.'
                type: array
                items:
                  $ref: '#/components/schemas/alarm'
              metadata:
                $ref: '#/components/schemas/metadata'
    getAlarm:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/alarm'
    postAlarmAction:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/extendedAlarmAction'
    postAlarmComment:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/extendedAlarmComment'
    getAlarmsRecipients:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                description: 'The receive alarms report email recipients response array.'
                type: array
                items:
                  $ref: '#/components/schemas/extendedAlarmsRecipient'
    postAlarmsRecipient:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/extendedAlarmsRecipient'
    patchAlarmsRecipient:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/extendedAlarmsRecipient'
    deleteAlarmsRecipient:
      description: 'Successful operation.'
      content:
        application/json:
          schema:
            type: object
            required:
              - requestId
            properties:
              requestId:
                type: string
                description: 'The ID of the request.'
                example: 'df5fg-45fgfdsg-45fg-45454'
    getPartnerOperationalStatistics:
      description: 'Successful operation'
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - requestId
            properties:
              data:
                $ref: '#/components/schemas/partnerOperationalStatistics'
              requestId:
                $ref: '#/components/schemas/requestId'
    badRequestError:
      description: 'Bad request error.'
      content:
        application/json:
          schema:
            title: 'Bad request error'
            allOf:
              - $ref: '#/components/schemas/error'
            example:
              error: 'BadRequestError'
              message: 'bad request error: {message}'
              requestId: '11af5b37-e038-42e0-8dcf-dc8c4aefc000'
    unauthorizedError:
      description: 'Unauthorized error.'
      content:
        application/json:
          schema:
            title: 'Unauthorized error'
            allOf:
              - $ref: '#/components/schemas/error'
            example:
              error: 'UnauthorizedError'
              message: 'unauthorized error'
              requestId: '11af5b37-e038-42e0-8dcf-dc8c4aefc000'
    forbiddenError:
      description: 'Forbidden error.'
      content:
        application/json:
          schema:
            title: 'Forbidden error'
            allOf:
              - $ref: '#/components/schemas/error'
            example:
              error: 'ForbiddenError'
              message: 'forbidden error'
              requestId: '11af5b37-e038-42e0-8dcf-dc8c4aefc000'
    notFoundError:
      description: 'Not found error.'
      content:
        application/json:
          schema:
            title: 'Not found error'
            allOf:
              - $ref: '#/components/schemas/error'
            example:
              error: 'NotFoundError'
              message: 'not found error: {message}'
              requestId: '11af5b37-e038-42e0-8dcf-dc8c4aefc000'
    conflictError:
      description: 'Conflict error.'
      content:
        application/json:
          schema:
            title: 'Conflict error'
            allOf:
              - $ref: '#/components/schemas/error'
            example:
              error: 'ConflictError'
              message: 'conflict error: {message}'
              requestId: '11af5b37-e038-42e0-8dcf-dc8c4aefc000'
    expectationFailedError:
      description: 'Expectation failed error.'
      content:
        application/json:
          schema:
            title: 'Expectation failed error'
            allOf:
              - $ref: '#/components/schemas/error'
            example:
              error: 'ExpectationFailedError'
              message: 'expectation failed error: {message}'
              requestId: '11af5b37-e038-42e0-8dcf-dc8c4aefc000'
    internalServerError:
      description: 'Internal server error'
      content:
        application/json:
          schema:
            title: 'Internal server error'
            allOf:
              - $ref: '#/components/schemas/error'
            example:
              error: 'UnknownError'
              message: 'unknown error has occurred'
              requestId: '11af5b37-e038-42e0-8dcf-dc8c4aefc000'
  parameters:
    imeiPath:
      in: path
      name: imei
      description: 'The IMEI of the device. The IMEI number can be found on a sticker on the device itself or on the back of the device box.'
      required: true
      schema:
        $ref: '#/components/schemas/imei'
    cameraIdPath:
      in: path
      name: cameraId
      description: 'The ID of the camera.<br><br>
        1 - road-facing camera, 2 - in-cabin-facing camera, 50+ - auxiliary cameras.'
      required: true
      schema:
        type: string
        description: 'The ID of the camera.<br><br>
          1 - road-facing camera, 2 - in-cabin-facing camera, 50+ - auxiliary cameras.'
        example: '2'
    partnerIdPath:
      in: path
      name: partnerId
      description: 'The ID of the partner. Obtain this from GET /partner-contact.'
      required: true
      schema:
        type: string
        description: 'The ID of the partner.'
        example: '62'
    partnerIdQuery:
      in: query
      name: partnerId
      description: 'Filter by the ID of the partner. Obtain this from GET /partner-contact.'
      required: false
      schema:
        type: string
        description: 'Filter by the ID of the partner.'
        example: '62'
    partnerContactIdPath:
      in: path
      name: partnerContactId
      description: 'The ID of the partner’s contact. Obtain this from GET /partner-contacts.'
      required: true
      schema:
        type: string
        description: 'The ID of the partner’s contact.'
        example: '62'
    orgIdPath:
      in: path
      name: orgId
      description: 'The ID of the organization. Obtain this from GET /organizations.'
      required: true
      schema:
        type: string
        description: 'The ID of the organization.'
        example: '62'
    organizationIdQuery:
      in: query
      name: orgId
      description: 'Filter by the ID of the organization. Obtain this from GET /organizations.'
      required: false
      schema:
        $ref: '#/components/schemas/organizationIdString'
    partnerOrganizationIdQuery:
      in: query
      name: organizationId
      description: 'Filter by the ID of the partner’s organization. Obtain this from GET /organizations. This is an optional parameter for partners.'
      required: false
      schema:
        $ref: '#/components/schemas/organizationIdString'
    webhookIdPath:
      in: path
      name: webhookId
      description: 'The ID of the webhook.'
      required: true
      schema:
        type: string
        description: 'The ID of the webhook.'
        example: 1
    eventIdPath:
      in: path
      name: eventId
      description: 'The ID of the event. Obtain this from GET /devices/{imei}/events.'
      required: true
      schema:
        type: string
        description: 'The ID of the event.'
        example: '62'
    groupIdPath:
      in: path
      name: groupId
      description: 'The ID of the group. Obtain this from GET /organizations/{orgId}/devices.'
      required: true
      schema:
        type: string
        description: 'The ID of the group.'
        example: '62'
    groupIdQuery:
      in: query
      name: groupId
      description: 'Filter by the ID of the group. Obtain this from GET /organizations/{orgId}/devices.'
      schema:
        type: string
        description: 'Filter by the ID of the group.'
        example: '62'
    recipientIdPath:
      in: path
      name: recipientId
      description: 'The ID of the email recipient. Obtain this from GET /recipients/health.'
      required: true
      schema:
        type: string
        pattern: '^[1-9]\d*$'
        description: 'The ID of the email recipient.'
        example: '25'
    startQuery:
      in: query
      name: start
      required: true
      description: 'Filter by a start date and time, in ISO 8601 format.'
      schema:
        $ref: '#/components/schemas/start'
    endQuery:
      in: query
      name: end
      required: true
      description: 'Filter by an end date and time, in ISO 8601 format.'
      schema:
        $ref: '#/components/schemas/end'
    userIdQuery:
      in: query
      description: 'Filter by the ID of the user.'
      name: userId
      required: false
      schema:
        $ref: '#/components/schemas/userIdString'
    fileIdQuery:
      in: query
      name: fileId
      required: true
      description:
        'Filter by the ID of the requested file. Obtain this from the /devices/{imei}/events call or
        calculate the unix timestamp (seconds from epoch) of the event (applicable only to virtual events).'
      schema:
        $ref: '#/components/schemas/fileId'
    fileTypeQuery:
      in: query
      name: fileType
      required: true
      description:
        'Filter by the file type of the requested file. Obtain this from the /devices/{imei}/events call
        or set to the value of video/snapshot if the device configuration is predefined.'
      schema:
        $ref: '#/components/schemas/fileType'
    cameraIdQuery:
      in: query
      name: cameraId
      required: true
      description:
        'Filter by the ID of the camera associated with the requested file.
        Obtain this from the /devices/{imei}/events call or set to the ID of the desired camera
        if the camera’s configuration is predefined:
        1 - road-facing camera, 2 - in-cabin-facing camera, 50+ - auxiliary cameras.'
      schema:
        description:
          'Filter by the ID of the camera associated with the requested file.
          Obtain this from the /devices/{imei}/events call or set to the ID of the desired camera
          if the camera’s configuration is predefined:
          1 - road-facing camera, 2 - in-cabin-facing camera, 50+ - auxiliary cameras.'
        type: string
        example: '1'
    nameQuery:
      in: query
      name: name
      description: 'Filter by the name of the user.'
      schema:
        type: string
        description: 'Filter by the name of the user.'
        example: 'Mike'
    imeiQuery:
      in: query
      name: imei
      description: 'Filter by the IMEI number of the device. The IMEI number can be found on a sticker on the device itself or on the back of the device box.'
      schema:
        type: string
        description: 'Filter by the IMEI number of the device. The IMEI number can be found on a sticker on the device itself or on the back of the device box.'
        example: '12345678'
    locatedQuery:
      in: query
      name: located
      description: 'Filter for located devices only.'
      allowEmptyValue: true
      schema:
        type: string
        description: 'Filter for located devices only.'
    lastConnectedAtStartQuery:
      in: query
      name: lastConnectedAtStart
      required: false
      description:
        'Filter by the start date and time of when the device was last connected, in ISO 8601 format.
        This is required when lastConnectedAtEnd is provided.'
      schema:
        $ref: '#/components/schemas/lastConnectedAt'
    lastConnectedAtEndQuery:
      in: query
      name: lastConnectedAtEnd
      required: false
      description:
        'Filter by the end date and time of when the device was last connected, in ISO 8601 format.
        This is required when lastConnectedAtStart is provided.'
      schema:
        $ref: '#/components/schemas/lastConnectedAt'
    lastRecordingUpdatedAtStartQuery:
      in: query
      name: lastRecordingUpdatedAtStart
      required: false
      description:
        'Filter by the start date and time of when the device last updated recordings, in ISO 8601 format.
        This is required when lastRecordingUpdatedAtEnd is provided.'
      schema:
        $ref: '#/components/schemas/lastRecordingUpdatedAt'
    lastRecordingUpdatedAtEndQuery:
      in: query
      name: lastRecordingUpdatedAtEnd
      required: false
      description:
        'Filter by the end date and time of when the device last updated recordings, in ISO 8601 format.
        This is required when lastRecordingUpdatedAtEnd is provided.'
      schema:
        $ref: '#/components/schemas/lastRecordingUpdatedAt'
    lastRecordingHealthQuery:
      in: query
      name: lastRecordingHealth
      description: 'Filter for healthy devices.'
      allowEmptyValue: true
      schema:
        type: string
        description: 'Filter for healthy devices.'
    deviceHealthSortQuery:
      in: query
      name: sort
      required: false
      description: 'Sort devices in the health report by specific parameters, such as device names or IMEI numbers.'
      schema:
        title: 'Sort device health'
        description: 'Sort devices in the health report by specific parameters, such as device names or IMEI numbers.'
        type: string
        enum:
          - name
          - imei
          - lastConnectedAt
          - lastRecordingHealth
          - lastRecordingUpdatedAt
    alarmIdPath:
      in: path
      name: alarmId
      description: 'The ID of the alarm. Obtain this from GET /alarms.'
      required: true
      schema:
        type: string
        description: 'The ID of the alarm.'
        pattern: '^[1-9]\d*$'
        example: '62'
    alarmDefinitionNameQuery:
      in: query
      name: alarmDefinitionName
      required: false
      description: 'Filter by the name of the alarm.'
      schema:
        title: 'Filter by the name of the alarm.'
        type: string
        minLength: 2
    alarmDefinitionSeverityQuery:
      in: query
      name: alarmDefinitionSeverity
      required: false
      description: 'Filter by the severity of the alarm.'
      schema:
        title: 'Alarm severity'
        type: string
        pattern: '^[1-9]\d*$'
    readFilterQuery:
      in: query
      name: read
      description: 'Filter for alarms that are read.'
      allowEmptyValue: true
      schema:
        title: 'Read'
        type: string
    unreadFilterQuery:
      in: query
      name: unread
      description: 'Filter for alarms that are unread.'
      allowEmptyValue: true
      schema:
        title: 'Unread'
        type: string
    closeFilterQuery:
      in: query
      name: close
      description: 'Filter for alarms that are closed.'
      allowEmptyValue: true
      schema:
        title: 'Close'
        type: string
    openFilterQuery:
      in: query
      name: open
      description: 'Filter for alarms that are open.'
      allowEmptyValue: true
      schema:
        title: 'Open'
        type: string
    alarmsSortQuery:
      in: query
      name: sort
      required: false
      description: 'Sort alarms by specific parameters, such as device names or IMEI numbers.'
      schema:
        title: 'Sort for alarms'
        description: 'Sort alarms by specific parameters, such as device names or IMEI numbers.'
        type: string
        enum:
          - name
          - imei
          - organizationName
          - partnerName
          - alarmDefinitionSeverity
          - alarmDefinitionName
          - createdAt
    previousMonthsQuery:
      in: query
      name: months
      required: false
      description: 'The number of previous months to include in the statistical trends. The current month is included by default.'
      schema:
        title: 'Months'
        type: integer
        default: 1
        minimum: 0
        maximum: 36
        example: 2
    previousWeeksQuery:
      in: query
      name: weeks
      required: false
      description: 'The number of previous weeks to include in the statistical trends. The current week is included by default.'
      schema:
        title: 'Weeks'
        type: integer
        default: 1
        minimum: 0
        maximum: 156
        example: 5
    orderQuery:
      in: query
      name: order
      description: 'Set the order that pagination results appear in - ascending or descending order.'
      schema:
        title: 'Order'
        description: 'Set the order that pagination results appear in - ascending or descending order.'
        type: string
        enum:
          - asc
          - desc
        default: 'desc'
    limitQuery:
      in: query
      name: limit
      description: 'Set the maximum number of pagination results to receive.'
      schema:
        description: 'Set the maximum number of pagination results to receive.'
        type: string
        pattern: '^[1-9]\d*$'
        default: '0'
        example: '1'
    offsetQuery:
      in: query
      name: offset
      description: 'Set the number of results to skip over before receiving pagination results.'
      schema:
        description: 'Set the number of results to skip over before receiving pagination results.'
        type: string
        pattern: '^[1-9]\d*$'
        default: '0'
        example: '1'
  schemas:
    calibrationCompleted:
      title: 'Accelerometer calibration state'
      description: 'If the accelerometer is calibrated or not.'
      type: boolean
    alarm:
      type: object
      title: 'Alarm'
      description: 'The alarm object.'
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/alarmId'
        details:
          description: 'The details of the alarm.'
          type: string
          example: 'cyclic_recorder_status: 4, last_video_record_time: 1600683797'
        organizationId:
          $ref: '#/components/schemas/organizationId'
        organizationName:
          $ref: '#/components/schemas/organizationName'
        partnerId:
          $ref: '#/components/schemas/partnerId'
        partnerName:
          $ref: '#/components/schemas/partnerName'
        userId:
          $ref: '#/components/schemas/userId'
        alarmDefinitionId:
          $ref: '#/components/schemas/alarmDefinitionId'
        createdAt:
          description: 'The date that the alarm was created, in ISO format.'
          type: string
          format: date-time
        lastReadAt:
          description: 'The date that the alarm was last read, in ISO format.'
          type: string
          format: date-time
        lastCloseAt:
          description: 'The date that the alarm was last closed, in ISO format.'
          type: string
          format: date-time
        comments:
          description: 'The comments array.'
          type: array
          items:
            $ref: '#/components/schemas/extendedAlarmComment'
        actions:
          description: 'The actions array.'
          type: array
          items:
            $ref: '#/components/schemas/extendedAlarmAction'
    alarmAction:
      type: object
      title: 'Alarm action'
      description: 'The alarm action object.'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/alarmActionType'
    extendedAlarmAction:
      title: 'Alarm action - extended'
      description: 'The extended alarm action object.'
      allOf:
        - $ref: '#/components/schemas/alarmAction'
        - type: object
          required:
            - id
            - alarmId
            - createdByAudienceName
            - createdById
            - createdAt
          properties:
            id:
              type: integer
              description: 'The ID of the alarm comment.'
              example: 125
            alarmId:
              $ref: '#/components/schemas/alarmId'
            createdByAudienceName:
              $ref: '#/components/schemas/audienceName'
            createdById:
              type: integer
              description: 'The ID of the user who created the alarm comment.'
              example: 625
            createdAt:
              description: 'The date that the alarm comment was created, in ISO format.'
              type: string
              format: date-time
    alarmActionType:
      title: 'Alarm action type'
      type: string
      enum:
        - open
        - close
        - read
    alarmComment:
      type: object
      title: 'Alarm comment'
      description: 'The alarm comment object.'
      required:
        - details
      properties:
        details:
          type: string
          description: 'The details provided in the alarm comment.'
    extendedAlarmComment:
      title: 'Alarm comment - extended'
      description: ' The extended alarm comment object.'
      allOf:
        - $ref: '#/components/schemas/alarmComment'
        - type: object
          required:
            - id
            - createdAt
          properties:
            id:
              type: integer
              description: 'The ID of the alarm comment.'
            alarmId:
              $ref: '#/components/schemas/alarmId'
            createdByAudienceName:
              $ref: '#/components/schemas/audienceName'
            createdById:
              type: integer
              description: 'The ID of the user who created the alarm comment.'
            createdAt:
              description: 'The date that the alarm comment was created, in ISO format.'
              type: string
              format: date-time
    alarmDefinition:
      type: object
      title: 'Alarm definition'
      description: 'The alarm definition object.'
      properties:
        id:
          $ref: '#/components/schemas/alarmDefinitionId'
        name:
          type: string
          description: 'The name of the alarm.'
          example: 'Hardware failure: Unable to start camera imager and record'
        severity:
          type: number
          description: 'The severity of the alarm.'
          example: 60
        recommendation:
          type: string
          description: 'The recommendation to resolve the alarm.'
    alarmDefinitionId:
      title: 'Alarm definition ID'
      description: 'The ID of the alarm definition.'
      type: number
      example: 625
    alarmId:
      title: 'Alarm ID'
      description: 'The ID of the alarm.'
      type: number
      example: 625
    alarmsRecipient:
      title: 'Alarms report email recipient'
      description: 'The alarms report email recipient object.'
      type: object
      properties:
        email:
          $ref: '#/components/schemas/email'
        reportIntervalSeconds:
          $ref: '#/components/schemas/alarmsReportIntervalSeconds'
        alarmDefinitions:
          description: 'The alarm definition array.'
          type: array
          items:
            type: object
            description: 'The alarm definition object.'
            required:
              - id
            properties:
              id:
                type: number
                description: 'The ID of the alarm.'
                example: 625
              name:
                type: string
                description: 'The name of the alarm.'
                example: 'Hardware failure: Unable to start camera imager and record.'
    extendedAlarmsRecipient:
      title: 'Alarms report email recipient - extended'
      description: 'The extended alarms report email recipient object.'
      allOf:
        - $ref: '#/components/schemas/alarmsRecipient'
        - type: object
          required:
            - id
          properties:
            id:
              $ref: '#/components/schemas/recipientId'
            createdByAudienceName:
              $ref: '#/components/schemas/audienceName'
            createdById:
              type: integer
              description: 'The ID of the audience name entity.'
            targetEntity:
              $ref: '#/components/schemas/targetEntity'
            targetId:
              type: integer
              description: 'The ID of the target entity.'
            lastReportAt:
              description: 'The last report date, in ISO format.'
              type: string
              format: date-time
    altitude:
      title: 'Altitude'
      description: 'The GPS altitude.'
      type: number
      maximum: 10000
      example: 234.22
    associatedDevices:
      type: object
      title: 'Associated devices'
      description: 'The associated devices object.'
      required:
        - imei
        - associatedDevice
      properties:
        imei:
          $ref: '#/components/schemas/imei'
        associatedDevice:
          description: 'The ID of the associated device.'
          type: string
          nullable: true
        db:
          description: 'The database to which the associated device belongs.'
          type: string
          nullable: true
    audienceName:
      type: string
      title: 'Audience entity'
      description: 'The type of entity.'
      enum:
        - surfsight
        - organization
        - partner
    auditLog:
      type: object
      title: 'Audit log'
      description: 'The audit logs object.'
      required:
        - id
        - message
        - reason
      properties:
        id:
          type: number
          description: 'The ID of the group.'
          example: 461
        message:
          type: string
          description: 'The operation that was executed.'
          example: 'Deleted entity'
        reason:
          type: string
          description: 'Where the operation was executed from.'
          example: 'Change purge days value of organization'
        createdAt:
          description: 'The creation date and time of the audit log, in ISO format.'
          type: string
          format: date-time
        value:
          description: 'The parameter values of the executed operation.'
          type: string
        previousValue:
          description: 'The parameter previous values of the executed operation.'
          type: string
        organizationId:
          description: 'The ID of the organization.'
          type: string
        organizationName:
          type: string
          minLength: 1
          description: 'The name assigned to the organization in the POST /organizations call.'
          example: 'Amazing organization'
        partnerId:
          description: 'The ID of the partner. Obtain this from GET /partner-contacts.'
          type: string
        partnerName:
          type: string
          description: 'The name assigned to the partner.'
          example: 'Amazing partner'
        userId:
          description: 'The ID of the user.'
          type: string
        userName:
          type: string
          description: 'The name assigned to the user.'
          example: 'Amazing user'
        imei:
          type: string
          description: 'The IMEI number of the device. The IMEI number can be found on a sticker on the device itself or on the back of the device box.'
    cameraId:
      title: 'Camera ID'
      description: 'The ID of the camera.<br><br>
        1 - road-facing camera, 2 - in-cabin-facing camera, 50+ - auxiliary cameras.'
      type: number
      example: 1
    cameraRangeObject:
      title: 'Camera recordings intervals'
      description: 'The camera ID and time intervals of any available recordings object.'
      type: object
      required:
        - cameraId
        - intervals
      properties:
        cameraId:
          type: number
          description: 'The ID of the camera attached to the device.<br><br>
            1 - road-facing camera, 2 - in-cabin-facing camera, 50+ - auxiliary cameras.'
        intervals:
          type: array
          description: 'The time intervals of any available recordings for a specific camera array.'
          items:
            type: object
            required:
              - start
              - end
            properties:
              start:
                $ref: '#/components/schemas/start'
              end:
                $ref: '#/components/schemas/end'
    connectionStatus:
      title: 'Connection status'
      description: 'The device connection status.<br><br>
        When online, the device is fully functional.
        When in standby, the device is connected to the cloud, but live streaming is not available.
        When offline, the device is not connected to the cloud.'
      type: string
      enum:
        - online
        - standby
        - offline
    dataType:
      title: 'Data type'
      description:
        'The type of data that is attached to an event when the event is generated.
        This data may not be attached to the event if there is too much data being used.'
      type: string
      enum:
        - none
        - snapshot
        - video
    deviceDataUsage:
      title: 'Data usage'
      description: 'Receive the data usage of the device for the current billing period.'
      type: object
      required:
        - mobileTx
        - mobileRx
        - liveStreamingUsage
        - eventsUsage
        - liveStreamUsageMilli
        - recordStreamUsageMilli
        - recordStreamingUsage
        - recordingsUploadUsage
        - usageEventsTodayDay
        - usageEventsTodayMonth
        - receivedAt
      properties:
        mobileTx:
          type: number
          description: 'The total data transmitted from the device, in bytes.'
          example: 1742802650
        mobileRx:
          type: number
          example: 105125084
          description: 'The total data received by the device, in bytes.'
        liveStreamingUsage:
          type: number
          example: 1509793264
          description: 'The amount of data used from live video streaming, in bytes.'
        eventsUsage:
          type: number
          example: 49707444
          description: 'The amount of data used from uploading video events, in bytes.'
        liveStreamUsageMilli:
          type: number
          example: 25026908
          description: 'The amount of time spent watching live video streaming, in milliseconds.'
        recordStreamingUsage:
          type: number
          example: 14869072
          description: 'The amount of data used from streaming recordings, in bytes.'
        recordingsUploadUsage:
          type: number
          example: 0
          description: 'The amount of data used from uploading recordings, in bytes.'
        usageEventsTodayDay:
          type: number
          description: 'The number of video events that have occurred today.'
          example: 3
        usageEventsTodayMonth:
          type: number
          description: 'The number of video events that have occurred this month.'
          example: 44
        recordStreamUsageMilli:
          type: number
          description: 'The amount of time spent watching recordings, in milliseconds.'
          example: 25026908
        receivedAt:
          $ref: '#/components/schemas/time'
        billingDayOfMonth:
          type: number
          description: 'The day of the month that the device data plan is billed.'
          example: 1
    eventDeleted:
      title: 'Deleted event'
      description: 'The deleted event object.'
      type: object
      required:
        - eventId
        - time
      properties:
        eventId:
          $ref: '#/components/schemas/eventId'
        time:
          $ref: '#/components/schemas/time'
    device:
      type: object
      title: 'Device'
      description: 'The device object.'
      required:
        - name
        - imei
      properties:
        name:
          $ref: '#/components/schemas/deviceName'
        imei:
          $ref: '#/components/schemas/imei'
        groupId:
          $ref: '#/components/schemas/groupId'
    extendedDevice:
      title: 'Device - extended'
      description: 'The extended device object.'
      allOf:
        - $ref: '#/components/schemas/device'
        - type: object
          required:
            - cameras
            - lat
            - lon
            - alt
            - speed
            - vehicleType
          properties:
            vehicleType:
              description:
                "The type of vehicle associated with the device.<br><br>
                The type of vehicle affects the sensitivity of the device's motion sensor. Private is the most sensitive to movements, and trailer is the least sensitive."
              type: string
              enum:
                - Private
                - Van
                - Trailer
            lat:
              $ref: '#/components/schemas/latitude'
            lon:
              $ref: '#/components/schemas/longitude'
            alt:
              $ref: '#/components/schemas/altitude'
            speed:
              $ref: '#/components/schemas/speed'
            status:
              $ref: '#/components/schemas/connectionStatus'
            lastSeenOnline:
              $ref: '#/components/schemas/lastSeenOnline'
            firmwareVersion:
              $ref: '#/components/schemas/firmwareVersion'
            deviceModel:
              $ref: '#/components/schemas/deviceModel'
            cameras:
              description: >
                The cameras array.
              type: array
              items:
                description: 'The camera object'
                type: object
                required:
                  - cameraId
                properties:
                  cameraId:
                    description: 'The ID of the camera.<br><br>
                      1 - road-facing camera, 2 - in-cabin-facing camera, 50+ - auxiliary cameras.'
                    type: number
                  name:
                    description: 'The name assigned to the camera.'
                    type: string
            iccid:
              type: string
              description: "The number of the device's SIM card."
    alarmsReportIntervalSeconds:
      title: 'Device alarm report interval'
      description:
        'The frequency of the device alarms report, in seconds. To receive a report email every hour,
        the value should be 3600.'
      type: number
    deviceCameraTelemetry:
      title: 'Device camera telemetry'
      description: 'The camera telemetry object.'
      type: object
      required:
        - status
        - code
      properties:
        status:
          description: |
            The status of the camera stream download.
          type: string
          example: 'the download is not yet in progress or just completed'
        code:
          description: |
            The status code of the camera stream download. Value options:
            CODE1 - the live stream is ready
            CODE2 - the live stream is not yet in progress or just completed
            CODE3 - the downloading recording is ready
            CODE4 - the downloading recording is not yet started or just completed
            CODE5 - the download is not yet in progress or just completed
          type: string
          enum:
            - CODE1
            - CODE2
            - CODE3
            - CODE4
            - CODE5
    deviceConfig:
      title: 'Device configuration'
      description: 'The device configuration object.'
      type: object
      properties:
        distractedDriver:
          description: 'The distracted driver setting object.'
          type: object
          required:
            - value
          properties:
            value:
              description: 'In-cabin audio and visual alerts when distracted driving events, such as cell phone usage, eating and drinking, or smoking, occur.'
              type: boolean
        liveVideo:
          description: 'The live video setting object.'
          type: object
          required:
            - value
          properties:
            value:
              description: 'Live video streaming from the device.'
              type: boolean
        driverCamera:
          description: 'The driver camera setting object.'
          type: object
          required:
            - value
          properties:
            value:
              description:
                "Turn the driver (in-cabin-facing) camera on/off. If the in-cabin-facing camera is off,
                all configurations related to the in-cabin-facing camera won't work, such as distracted driver or in-cabin-facing camera recording."
              type: boolean
        textOverlay:
          description: 'The text overlay setting object.'
          type: object
          required:
            - value
          properties:
            value:
              description: 'The text overlay in video recordings and video events.'
              type: boolean
        inCabinCameraRecording:
          description: 'The in-cabin-facing camera recording setting object.'
          type: object
          required:
            - value
          properties:
            value:
              description: 'Turn the in-cabin recordings on/off. The distracted driver feature works whether or not the recordings are on.'
              type: boolean
        driverPosition:
          description: 'The driver position setting object.'
          type: object
          required:
            - value
          properties:
            value:
              description: 'The driver seat location - the left or right side of the vehicle. Must be set correctly for the distracted driver setting to work properly.'
              type: string
              enum:
                - left
                - right
        speedUnits:
          description: 'The speed units setting object.'
          type: object
          required:
            - value
          properties:
            value:
              description: 'The units used for speed measurement - miles per hour or kilometers per hour.'
              type: string
              enum:
                - mph
                - kmh
        audioAlarms:
          description: 'The audio alarms setting object.'
          type: object
          required:
            - value
          properties:
            value:
              description: 'Audio alarms from the device for dangerous and distracted driving events.'
              type: boolean
        notifyLiveStreaming:
          description: 'The notify live streaming setting object.'
          type: object
          required:
            - value
          properties:
            value:
              description: 'The on-screen text notification when someone is viewing live video of the device.'
              type: boolean
        adminPin:
          description: 'The admin PIN setting object.'
          type: object
          required:
            - value
          properties:
            value:
              description: 'The admin PIN.'
              type: string
              example: '1234'
        driverPin:
          description: 'The driver PIN setting object.'
          type: object
          required:
            - value
          properties:
            value:
              description: 'The driver PIN.'
              type: string
              example: '1234'
        brightness:
          description: 'The screen brightness setting object.'
          type: object
          required:
            - value
          properties:
            value:
              description: 'The screen brightness.'
              type: number
              example: 128
              minimum: 0
              maximum: 255
        dateTimeUnits:
          description: 'The date and time units setting object.'
          type: object
          required:
            - value
          properties:
            value:
              description: 'The units used for date and time. "us" - US units, "eu" - metric units.'
              type: string
              enum:
                - us
                - eu
        voiceRecording:
          description: 'The voice recording setting object.'
          type: object
          required:
            - value
          properties:
            value:
              description: 'Record voices in the vehicle.'
              type: boolean
        standby:
          description: 'The standby setting object.'
          type: object
          required:
            - timeout
          properties:
            timeout:
              description: 'The time period after which the camera enters standby mode once the vehicle stops moving, in minutes.'
              type: number
              example: 10
              minimum: 1
              maximum: 60
        hotSpot:
          description: 'The hotspot setting object.'
          type: object
          required:
            - internetAccess
          properties:
            internetAccess:
              description: 'The internet access via the device hotspot.'
              type: boolean
        privacy:
          description: 'The privacy settings object.'
          type: object
          properties:
            gpsEnabled:
              description: 'The GPS tracking.'
              type: boolean
            mvaiEnabled:
              description: 'MVAI, machine vision and artificial intelligence, to identify distracted driving.'
              type: boolean
            cameras:
              description: 'The cameras array.'
              type: array
              items:
                description: 'The privacy settings for a specific camera object.'
                type: object
                required:
                  - cameraId
                properties:
                  cameraId:
                    $ref: '#/components/schemas/cameraId'
                  recordingEnabled:
                    description: 'Enable or disable recording for the camera.'
                    type: boolean
                  eventsEnabled:
                    description: 'Enable or disable creating events for the camera.'
                    type: boolean
    lastConnectedAt:
      title: 'Device connection time'
      description: 'The last date and time that the device was connected, in ISO 8601 format.'
      type: string
      format: date-time
    deviceHealth:
      type: object
      title: 'Device health'
      description: 'The device health status object.'
      required:
        - imei
        - name
        - organizationId
        - partnerId
        - lastConnectedAt
        - lastRecordingHealth
        - lastRecordingUpdatedAt
      properties:
        name:
          $ref: '#/components/schemas/deviceName'
        imei:
          $ref: '#/components/schemas/imei'
        organizationId:
          $ref: '#/components/schemas/organizationId'
        partnerId:
          $ref: '#/components/schemas/partnerId'
        lastConnectedAt:
          $ref: '#/components/schemas/lastConnectedAt'
        lastRecordingHealth:
          $ref: '#/components/schemas/lastRecordingHealth'
        lastRecordingUpdatedAt:
          $ref: '#/components/schemas/lastRecordingUpdatedAt'
    healthReportIntervalSeconds:
      title: 'Device health report interval'
      description:
        'The frequency of the device health report, in seconds. To receive a report email every hour,
        the value should be 3600.'
      type: number
    deviceModel:
      title: 'Device model'
      description: 'The model of the device.'
      type: string
      example: 'AI-12'
    deviceName:
      type: string
      title: 'Device name'
      description: 'The name assigned to the device in the POST /organizations/{orgId}/devices call.'
      example: "Aragorn's car"
    lastRecordingHealth:
      title: 'Device recording health'
      description: 'The health status of the device during the last recording.'
      type: boolean
    lastRecordingUpdatedAt:
      title: 'Device recording time'
      description: 'The last date and time that the device recordings were updated, in ISO 8601 format.'
      type: string
      format: date-time
    deviceTelemetry:
      title: 'Device telemetry'
      description: 'The device telemetry object.'
      type: object
      required:
        - firmwareVersion
        - deviceModel
        - lastSeenOnline
        - simNetworkType
        - simOperator
        - simState
        - calibrationCompleted
        - sdCardInserted
        - sdCardCapacityBytes
        - sdCardFreeBytes
      properties:
        firmwareVersion:
          $ref: '#/components/schemas/firmwareVersion'
        deviceModel:
          $ref: '#/components/schemas/deviceModel'
        lastSeenOnline:
          $ref: '#/components/schemas/lastSeenOnline'
        simNetworkType:
          $ref: '#/components/schemas/simNetworkType'
        simOperator:
          $ref: '#/components/schemas/simOperator'
        simState:
          $ref: '#/components/schemas/simState'
        calibrationCompleted:
          $ref: '#/components/schemas/calibrationCompleted'
        sdCardInserted:
          $ref: '#/components/schemas/sdCardInserted'
        sdCardCapacityBytes:
          $ref: '#/components/schemas/sdCardCapacityBytes'
        sdCardFreeBytes:
          $ref: '#/components/schemas/sdCardFreeBytes'
    email:
      title: 'Email'
      description: 'The email address of the entity.'
      type: string
      format: email
      example: 'email@email.com'
    recipientId:
      title: 'Email recipient ID'
      description: 'The ID of the email recipient.'
      type: number
    end:
      title: 'End date and time'
      description: 'The end date and time, in ISO 8601 format.'
      type: string
      format: date-time
      example: '2020-01-01T14:48:00.000Z'
    entity:
      title: 'Entity type'
      description: 'The current authenticated entity type.'
      type: string
      enum:
        - partner
        - user
    error:
      title: 'Error'
      description: 'The error and its message object.'
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: 'The error name.'
        message:
          type: string
          description: 'The error message.'
    event:
      title: 'Event'
      description: 'The event object.'
      type: object
      required:
        - id
        - eventType
        - time
        - lat
        - lon
        - files
      properties:
        id:
          $ref: '#/components/schemas/eventId'
        eventType:
          $ref: '#/components/schemas/eventType'
        time:
          $ref: '#/components/schemas/time'
        lat:
          $ref: '#/components/schemas/latitude'
        lon:
          $ref: '#/components/schemas/longitude'
        speed:
          $ref: '#/components/schemas/speed'
        files:
          description: 'The files attached to the event array.'
          type: array
          items:
            description: 'The file attached to the event object.'
            type: object
            required:
              - cameraId
              - fileType
              - fileId
            properties:
              cameraId:
                $ref: '#/components/schemas/cameraId'
              fileType:
                $ref: '#/components/schemas/fileType'
              fileId:
                $ref: '#/components/schemas/fileId'
        geoFenceId:
          $ref: '#/components/schemas/geofenceId'
        metadata:
          $ref: '#/components/schemas/eventMetadata'
    eventId:
      title: 'Event ID'
      description: 'The ID assigned to the event.'
      type: integer
      example: 3
    eventMetadata:
      title: 'Event metadata'
      description: 'The metadata of the event.'
      type: string
      example: "{type:'Test event',scope:'Some test scope'}"
    eventObject:
      type: object
      title: 'Event settings'
      description: 'The settings configuration of a single event object.<br><br>
        The dataType field is required for all events. The lat, lon, and radius fields are required when eventType is set to geoFence.'
      required:
        - eventType
        - dataType
      properties:
        eventType:
          $ref: '#/components/schemas/eventType'
        dataType:
          $ref: '#/components/schemas/dataType'
        speedLimit:
          $ref: '#/components/schemas/speedLimit'
    eventType:
      title: 'Event type'
      description: 'The type of event:<br>
        <ul>acceleration - the driver increases speed suddenly</ul>
        <ul>accOff - the device is shut down</ul>
        <ul>accOn - the device is turned on or woken up from standby mode to active mode</ul>
        <ul>button - the driver manually triggers an event when he spots an unusual incident worth alerting about. To manually trigger an event, the driver presses the SOS button on the device</ul>
        <ul>coverOpened - the tamper-proof case protecting the SD and SIM card slots is opened</ul>
        <ul>deceleration - the driver reduces speed significantly</ul>
        <ul>distractedDriving - the driver is generally distracted from the road</ul>
        <ul>distractedDrivingBeep - the driver gets an audio and visual alert that they might be driving inattentively. After a few alerts with no change, a distractedDriving event is created.</ul>
        <ul>geoFence - the driver enters or exits a geofence</ul>
        <ul>jolt - the vehicle moves suddenly while in standby mode. If this is set as a video event, the recording only begins after the event is triggered, since the camera does not generally record during standby mode</ul>
        <ul>sharpTurnLeft - The driver turns left quickly.</ul>
        <ul>sharpTurnRight - The driver turns right quickly.</ul>
        <ul>speedLimit - the driver travels at a speed above the speed limit designated in the cloud. The speed is detected through the GPS</ul>
        <ul>powerDisconnectAlarm - the power cable is removed from the device</ul>
        <ul>smoking - the driver is smoking</ul>
        <ul>smokingBeep - the driver gets an audio and visual alert that they might be smoking. After a few alerts with no change from the driver, a smoking event is created.</ul>
        <ul>foodDrink - the driver is eating or drinking</ul>
        <ul>foodDrinkBeep - the driver gets an audio and visual alert that they might be eating or drinking. After a few alerts with no change from the driver, a foodDrink event is created.</ul>
        <ul>cellPhoneUse - the driver is using their cell phone</ul>
        <ul>cellPhoneUseBeep - the driver gets an audio and visual alert that they might be using their cell phone. After a few alerts with no change from the driver, a cellPhoneUse event is created.</ul>
        <ul>driverUnbelted - the driver does not have their seat belt fastened</ul>
        <ul>driverUnbeltedBeep - the driver gets an audio and visual alert that they might have their seat belt unbelted. After a few alerts with no change from the driver, a driverUnbelted event is created.</ul>
        <ul>virtualEvent - an event created by the user through the POST /devices/{imei}/virtual-event call or triggered by a third party</ul>
        <ul>wrongPinCode - an incorrect PIN is entered</ul>'
      type: string
      enum:
        - acceleration
        - accOff
        - accOn
        - activated
        - button
        - collision
        - coreConnection
        - coverOpened
        - deceleration
        - distractedDriving
        - geoFence
        - jolt
        - shakingEnded
        - shakingStarted
        - sharpTurnLeft
        - sharpTurnRight
        - speedLimit
        - powerDisconnectAlarm
        - smoking
        - foodDrink
        - cellPhoneUse
        - driverUnbelted
        - smokingBeep
        - foodDrinkBeep
        - cellPhoneUseBeep
        - driverUnbeltedBeep
        - distractedDrivingBeep
        - virtualEvent
        - wrongPinCode
        - gsensorHigh
        - gsensorRegular
        - accident
    eventConfig:
      title: 'Events configuration'
      description: 'The events settings configuration of the device object.'
      type: object
      required:
        - vehicleType
        - events
      properties:
        vehicleType:
          $ref: '#/components/schemas/vehicleType'
        events:
          type: array
          description: 'The events array.'
          items:
            $ref: '#/components/schemas/eventObject'
    fileId:
      title: 'File ID'
      description: 'The ID of the file.'
      type: string
      example: '1595077872'
    fileType:
      title: 'File type'
      description: 'The file type.'
      type: string
      enum:
        - video
        - snapshot
    firmwareVersion:
      title: 'Firmware version'
      description: 'The firmware version of the device.'
      type: string
      example: '3.9.53'
    geofence:
      title: 'Geofence'
      description: 'The geofence event settings configuration object.'
      type: object
      required:
        - lat
        - lon
        - radius
        - name
        - id
      properties:
        lat:
          $ref: '#/components/schemas/latitude'
        lon:
          $ref: '#/components/schemas/longitude'
        radius:
          description: 'The radius of the geofence, in meters.'
          type: number
          example: 200
        name:
          description: 'The name assigned to the geofence in the PUT /devices/{imei}/geofences call.'
          type: string
          example: 'My geofence 1'
        id:
          $ref: '#/components/schemas/geofenceId'
    geofenceId:
      title: 'Geofence ID'
      description: 'The ID of the relevant geoFence. Only applies when the event type is geoFence.'
      type: number
      example: 3
    gpsPoint:
      type: object
      title: 'GPS'
      description: 'The GPS object.'
      required:
        - lat
        - lon
        - alt
        - time
        - speed
      properties:
        lat:
          $ref: '#/components/schemas/latitude'
        lon:
          $ref: '#/components/schemas/longitude'
        alt:
          $ref: '#/components/schemas/altitude'
        time:
          type: number
          description: 'The time, in seconds from epoch.'
          example: 1595077872
        speed:
          $ref: '#/components/schemas/speed'
    group:
      type: object
      title: 'Group'
      description: 'The group object. Groups can contain zero or more devices.'
      required:
        - name
        - id
      properties:
        name:
          type: string
          description: 'The name assigned to the group in the POST /organizations/{orgId}/groups call.'
          example: 'Mordor group'
        id:
          type: number
          description: 'The ID of the group.'
          example: 461
    groupId:
      type: integer
      minimum: -1
      title: 'Group ID'
      description: 'The ID of the group. Obtain this from GET /organizations/{orgId}/devices.'
      example: 32
    healthRecipient:
      type: object
      title: 'Health report email recipient'
      description: 'The health report email recipient object.'
      required:
        - email
        - reportIntervalSeconds
      properties:
        email:
          $ref: '#/components/schemas/email'
        reportIntervalSeconds:
          $ref: '#/components/schemas/healthReportIntervalSeconds'
        organizationId:
          $ref: '#/components/schemas/organizationId'
    extendedHealthRecipient:
      title: 'Health report email recipient - extended'
      description: 'The extended hea;th report email recipient object'
      allOf:
        - $ref: '#/components/schemas/healthRecipient'
        - type: object
          required:
            - id
          properties:
            id:
              $ref: '#/components/schemas/recipientId'
    imei:
      title: 'IMEI'
      description: 'The IMEI number of the device. The IMEI number can be found on a sticker on the device itself or on the back of the device box.'
      type: string
      example: '357660101000198'
    lastSeenOnline:
      title: 'Last seen online'
      description: 'The most recent time that the device connected to the cloud, in ISO 8601 format. Updated every five minutes.'
      type: string
      format: date-time
      example: '2020-01-01T14:48:00.000Z'
    latitude:
      title: 'Latitude'
      description: 'The GPS latitude.'
      type: number
      minimum: -90
      maximum: 90
      example: 32.0598671
    longitude:
      title: 'Longitude'
      description: 'The GPS longitude.'
      type: number
      minimum: -180
      maximum: 180
      example: 34.7827316
    connectMedia:
      title: 'Media core server connection'
      description: 'The connect to a media core server object.'
      type: object
      required:
        - data
      properties:
        data:
          description: 'The connect to media core server to prepare the device for streaming and downloading object. The media token is valid for thirty minutes.'
          type: object
          required:
            - address
            - mediaToken
          properties:
            address:
              type: string
              description: |
                Receive the URL to get a recording or live video. Make this call again if your device does not start
                streaming within two minutes.<br><br>
                To manage bandwidth, audio does not play when streaming. To receive audio, download the recording.
              example: 'prod-us-03.surfsight.net'
            mediaToken:
              type: string
              description: 'The authentication token required for the URL that is generated. Valid for thirty minutes.'
              example: 'e3d53477-1f85-42c1-8ed0-2bb591700db8'
    metadata:
      title: 'Pagination metadata'
      description: 'The pagination metadata object.'
      type: object
      required:
        - count
        - limit
        - offset
      properties:
        count:
          description: 'The total number of pagination results received.'
          type: integer
        limit:
          description: 'The maximum number of pagination results to receive.'
          type: integer
        offset:
          description: 'The number of results to skip over before receiving pagination results.'
          type: integer
    simOperator:
      title: 'Mobile operator'
      description: 'The mobile operator of the device SIM card.'
      type: string
      example: 'Cellcom IL'
    monthlyAggregateResult:
      title: 'Monthly results'
      description: 'The overall result of the previous months for the entity.'
      required:
        - monthsAgo
        - startTime
        - endTime
        - count
      properties:
        monthsAgo:
          description: 'The number of previous months included in the statistical trends.'
          type: integer
          minimum: 0
          example: 2
        startTime:
          description: 'The start time of the previous months, in ISO format.'
          type: string
          format: date-time
        endTime:
          description: 'The end time of the previous months, in ISO format.'
          type: string
          format: date-time
        count:
          description: 'The total number of results for the previous months.'
          type: integer
          minimum: 0
          example: 1
    groupToCreate:
      type: object
      title: 'New group'
      description: 'The new group object.'
      required:
        - name
      properties:
        name:
          type: string
          description: 'The name you assign to the group.'
          example: 'Mordor group'
    organization:
      type: object
      title: 'Organization'
      description: 'The organization object.'
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          description: 'The name of the organization. Obtain this from GET /organizations.'
          example: 'Amazing organization'
        purgeDays:
          $ref: '#/components/schemas/organizationPurgeDays'
        purgeDaysFrontCamera:
          $ref: '#/components/schemas/organizationPurgeDays'
        purgeDaysRearCamera:
          $ref: '#/components/schemas/organizationPurgeDays'
        purgeDaysAuxiliaryCameras:
          $ref: '#/components/schemas/organizationPurgeDays'
    extendedOrganization:
      title: 'Organization - extended'
      description: 'The extended organization object.'
      allOf:
        - $ref: '#/components/schemas/organization'
        - type: object
          required:
            - id
            - alarmsCount
            - partnerId
          properties:
            id:
              $ref: '#/components/schemas/organizationId'
            partnerId:
              $ref: '#/components/schemas/partnerId'
            alarmsCount:
              type: number
              description: 'The number of unread alarms.'
            liveVideoTimeoutSeconds:
              type: number
              description: 'The amount of time that live video is streamed, in seconds.'
              example: 30
    organizationId:
      title: 'Organization ID'
      description: 'The ID of the organization. Obtain this from GET /organizations.'
      type: number
    organizationIdString:
      title: 'Organization ID as string'
      description: 'The ID of the organization, as a string. Obtain this from GET /organizations.'
      type: string
      pattern: '^[1-9]\d*$'
    organizationName:
      title: 'Organization name'
      description: 'The name assigned to the organization in POST /organizations.'
      type: string
      example: 'Company Name'
    partner:
      type: object
      title: 'Partner'
      description: 'The partner object.'
      required:
        - id
        - name
        - alarmsCount
      properties:
        id:
          $ref: '#/components/schemas/partnerId'
        name:
          $ref: '#/components/schemas/partnerName'
        alarmsCount:
          type: number
          description: 'The number of unread alarms associated with the partner.'
    partnerContact:
      type: object
      title: 'Partner contact'
      description: 'The partner contact object.'
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: 'The name assigned to the entity. The partner contact name is assigned in the POST /partners/{partnerId}/contacts call.'
        email:
          $ref: '#/components/schemas/email'
    extendedPartnerContact:
      title: 'Partner contact - extended'
      description: 'The extended partner contact object'
      allOf:
        - $ref: '#/components/schemas/partnerContact'
        - type: object
          required:
            - id
            - role
          properties:
            id:
              type: integer
              description: 'The ID of the entity. Obtain this from GET /partner-contacts.'
            role:
              type: string
              description: 'The role of the entity.'
              enum:
                - partner
                - partnerContact
    partnerId:
      title: 'Partner ID'
      description: 'The ID of the partner. Obtain this from GET /partner-contacts.'
      type: number
    partnerName:
      title: 'Partner name'
      description: 'The name of the partner.'
      type: string
      example: 'Partner Name'
    partnerOperationalStatistics:
      title: 'Partner operation statistics'
      description: 'The partner operation statistics object.'
      type: object
      properties:
        devices:
          title: 'Summary of partner devices activations'
          description: 'A summary of the partner’s device activations.'
          type: object
          properties:
            total:
              title: 'Total partner devices count'
              description: 'The total number of devices associated with the partner.'
              type: integer
              minimum: 0
            activated:
              title: 'Activated partner devices count'
              description: 'The total number of activated devices associated with the partner.'
              type: integer
              minimum: 0
            deactivated:
              title: 'Deactivated partner devices count'
              description: 'The total number of deactivated devices associated with the partner.'
              type: integer
              minimum: 0
        trends:
          title: 'Periodic trends of partner device activations and organizations'
          description: 'The trends of device activations and organizations associated with the partner over specific periods of time.'
          type: object
          properties:
            activations:
              title: 'Partner device activation trends'
              description: 'The device activations associated with the partner for previous months and weeks.'
              properties:
                total:
                  title: 'Total activated devices of the partner'
                  description: 'The total number of device activations associated with the partner.'
                  type: integer
                  minimum: 0
                previousMonths:
                  type: array
                  items:
                    title: 'Previous months device activations counts'
                    description: 'The number of device activations associated with the partner from the previous months.'
                    $ref: '#/components/schemas/monthlyAggregateResult'
                previousWeeks:
                  type: array
                  items:
                    title: 'Previous weeks device activations counts'
                    description: 'The number of device activations associated with the partner from the previous weeks.'
                    $ref: '#/components/schemas/weeklyAggregateResult'
            organizations:
              title: 'Partner organization creation trends'
              description: 'The new organization associated with the partner for previous months and weeks.'
              properties:
                total:
                  title: 'Total organizations of the partner'
                  description: 'The total number of new organizations associated with the partner.'
                  type: integer
                  minimum: 0
                previousMonths:
                  type: array
                  items:
                    title: 'Previous months created organizations count'
                    description: 'The number of new organizations associated with the partner from the previous months.'
                    $ref: '#/components/schemas/monthlyAggregateResult'
                previousWeeks:
                  type: array
                  items:
                    title: 'Previous weeks created organizations counts'
                    description: 'The number of new organizations associated with the partner from the previous weeks.'
                    $ref: '#/components/schemas/weeklyAggregateResult'
        devicesByOrganization:
          type: array
          items:
            title: 'Devices count by organization'
            description: 'The number of devices associated with organizations array.'
            required:
              - organizationId
              - name
              - count
            properties:
              organizationId:
                $ref: '#/components/schemas/organizationId'
              name:
                $ref: '#/components/schemas/organizationName'
              count:
                title: 'Count devices per organization'
                description: 'The number of devices associated with the organization.'
                type: integer
                minimum: 0
                example: 1
        recordingHealthFailedByOrganization:
          type: array
          title: 'Recording health failed devices of the partner by organization'
          description: 'The number of devices with failed recording health in organizations array.'
          items:
            title: 'Recording health failed devices per organization'
            description: 'The number of devices with failed recording health in each organization.'
            required:
              - organizationId
              - name
              - count
            properties:
              organizationId:
                $ref: '#/components/schemas/organizationId'
              name:
                $ref: '#/components/schemas/organizationName'
              count:
                title: 'Count devices with recording health failed per organization'
                description: 'The number of devices with failed recording health in the organization.'
                type: integer
                minimum: 0
                example: 1
        recordingHealthSummary:
          type: array
          title: 'Partner devices recording health summary'
          description: 'The recording health of devices associated with the partner array.'
          items:
            properties:
              recordingTestResult:
                title: 'Recording Test Result'
                description: 'The result of the recording health test.'
                type: string
                enum:
                  - passed
                  - failed
                  - notTested
              count:
                title: 'Count of recording health devices'
                description: 'The number of devices with the recording health test result.'
                type: integer
                minimum: 0
                example: 1
        alarmsByOrganization:
          type: array
          title: 'Alarms count by organization'
          description: 'The number of alarms associated with organizations array.'
          items:
            type: object
            title: 'Alarms count by organization'
            description: 'The number of alarms associated with each organization.'
            required:
              - organizationId
              - name
              - count
            properties:
              organizationId:
                $ref: '#/components/schemas/organizationId'
              name:
                $ref: '#/components/schemas/organizationName'
              count:
                title: 'Alarms count per Organization'
                description: 'The number of alarms associated with the organization.'
                type: integer
                minimum: 0
                example: 1
        alarmsByType:
          type: array
          title: 'Alarms count by type'
          description: 'The number of alarms for each alarm type array.'
          items:
            title: 'Alarms count by type'
            description: 'The number of alarms for each alarm type.'
            required:
              - alarmDefinitionId
              - name
              - count
            properties:
              alarmDefinitionId:
                $ref: '#/components/schemas/alarmDefinitionId'
              name:
                title: 'Alarm Name'
                description: 'The name of the alarm definition.'
                type: string
                example: 'Driver camera recording failure'
              count:
                title: 'Alarms count per organization'
                description: 'The number of alarms associated with the organization.'
                type: integer
                minimum: 0
                example: 1
    password:
      title: 'Password'
      description: 'The password of the entity. The password must contain eight characters, including one upper case and one lower case letter, one number, and one special character.'
      type: string
      format: password
      example: '123Abcd!'
    organizationPurgeDays:
      title: 'Purge time'
      description:
        'The amount of time that an organization’s data is retained in the cloud before being purged, in days.
        The default general purge time is 30 days.<br><br>
        Purge times can be set separately for each camera type (1 - road-facing camera, 2 - in-cabin-facing camera, 50+ - auxiliary cameras.)'
      type: number
      minimum: 1
      maximum: 120
      example: 103
    retentionConfig:
      type: array
      title: 'Recording retention configuration'
      description: 'The camera recording retention configuration array.
        The recording retention is how long recordings are stored on the SD card until they get overwritten with new recordings.'
      example: '[{"cameraId":1, "retentionMinutes":30}, {"cameraId":2, "retentionMinutes":30},{"cameraId":51, "retentionMinutes":30}]'
      items:
        description: 'The camera recording retention configuration object.'
        type: object
        required:
          - cameraId
          - retentionMinutes
        properties:
          cameraId:
            $ref: '#/components/schemas/cameraId'
          retentionMinutes:
            description: 'The recording retention time, in minutes.'
            type: number
            minimum: 4
    requestId:
      title: 'Request ID'
      type: string
      description: 'The ID of the request.'
      example: '06327cae-e075-42ca-b620-c5cfdd3b4e37'
    role:
      type: string
      title: 'Role'
      description: 'The role of the entity.'
      enum:
        - restricted
        - user
        - administrator
        - supervisor
    sdCardFreeBytes:
      title: 'SD card free space'
      description: 'The free space left on the SD card, in bytes.'
      type: integer
      example: 46724284416
    sdCardInserted:
      title: 'SD card insertion state'
      description: 'If the SD card of the device is inserted or not.'
      type: boolean
    sdCardCapacityBytes:
      title: 'SD card size'
      description: 'States if the SD card of the device is inserted or not.'
      type: integer
      example: 127817449472
    simNetworkType:
      title: 'SIM network type'
      description: 'The network type of the device SIM card.'
      type: string
      example: '4G'
    simState:
      title: 'SIM state'
      description: 'The state of the device SIM card.'
      type: string
      enum:
        - ready
        - absent
        - unknown
        - network locked
        - PIN required
        - PUR required
      example: 'ready'
    speed:
      title: 'Speed'
      description: 'The speed, in meters per second.'
      type: number
      example: 22.51
    speedLimit:
      title: 'Speed limit'
      description:
        'The speed limit, in km/h. When a vehicle reaches this speed, a speedLimit event is generated.
        Only applies to the speedLimit event.'
      type: number
      example: 120
    start:
      title: 'Start date and time'
      description: 'The start date and time, in ISO 8601 format.'
      type: string
      format: date-time
      example: '2020-01-01T14:48:00.000Z'
    targetEntity:
      type: string
      title: 'Target entity'
      description: 'The target entity.'
      enum:
        - organization
        - partner
        - null
      example: organization
    time:
      title: 'Time'
      description: 'The time, in ISO 8601 format.'
      type: string
      format: date-time
      example: '2020-01-01T14:48:00.000Z'
    token:
      title: 'Token'
      description: 'The authentication token.<br><br>
        For users - valid twenty four hours. For partners - valid for fifteen minutes.'
      type: string
      example: 'zskMdo9EBahb4lx4wX3GQKmxC6yOZImB1WuRa8Bbqtt'
    trip:
      title: 'Trip'
      description: 'The trip object.'
      type: object
      required:
        - start
        - end
        - duration
        - distance
        - maxSpeed
        - eventsCount
      properties:
        start:
          $ref: '#/components/schemas/gpsPoint'
        end:
          $ref: '#/components/schemas/gpsPoint'
        duration:
          type: number
          description: 'The trip duration, in seconds.'
          example: 1427
        distance:
          type: number
          description: 'The trip distance, in kilometers.'
          example: 31.6
        maxSpeed:
          type: number
          description: 'The maximum speed during the trip, in meters per second.'
          example: 30.2
        eventsCount:
          type: number
          description: 'The number of events in the trip.'
          example: 12
    user:
      type: object
      title: 'User'
      description: 'The user object.'
      required:
        - id
        - email
      properties:
        id:
          $ref: '#/components/schemas/userId'
        email:
          $ref: '#/components/schemas/email'
    userId:
      title: 'User ID'
      description: 'The ID of the user.'
      type: number
    userIdString:
      title: 'User ID as string'
      description: 'The ID of the user, as a string.'
      type: string
    vehicleType:
      title: 'Vehicle type'
      description: "The type of vehicle associated with the device.<br><br>
        The type of vehicle affects the sensitivity of the device's motion sensor. Private is the most sensitive to movements, and trailer is the least sensitive."
      type: string
      enum:
        - Private
        - Van
        - Trailer
    webhook:
      type: object
      title: 'Webhook'
      description: 'The webhook object.'
      required:
        - imei
        - url
        - type
      properties:
        imei:
          $ref: '#/components/schemas/imei'
        url:
          type: string
          description: 'The URL where the webhook is posted.'
          example: 'http://mywebhook.com'
        type:
          type: string
          description:
            'The type of the webhook. For the event type, every event triggered for this device is posted
            using the webhook. For the GPS type, all GPS information is posted.'
          enum:
            - gps
            - event
    weeklyAggregateResult:
      title: 'Weekly results'
      description: 'The overall result of the previous weeks for the entity.'
      required:
        - weeksAgo
        - startTime
        - endTime
        - count
      properties:
        weeksAgo:
          description: 'The number of previous weeks included in the statistical trends.'
          type: integer
          minimum: 0
          example: 2
        startTime:
          description: 'The start time of the previous weeks, in ISO format.'
          type: string
          format: date-time
        endTime:
          description: 'The end time of the previous weeks, in ISO format.'
          type: string
          format: date-time
        count:
          description: 'The total number of results for the previous weeks.'
          type: integer
          minimum: 0
          example: 1
    putBulkDeviceConfigOrganization:
      description: 'The bulk device configuration by organization object.'
      type: object
      required:
        - organizationId
        - config
      properties:
        organizationId:
          $ref: '#/components/schemas/organizationId'
        groupIds:
          description: 'The IDs of the requested groups. Obtain group IDs from GET /organizations/{orgId}/devices.'
          type: array
          items:
            $ref: '#/components/schemas/groupId'
        config:
          $ref: '#/components/schemas/deviceConfig'
    putBulkDeviceConfigImeis:
      description: 'The bulk device configuration by IMEI numbers object.'
      type: object
      required:
        - imeis
        - config
      properties:
        imeis:
          description: 'The IMEI numbers of the devices. The IMEI number can be found on a sticker on the device itself or on the back of the device box.'
          type: array
          items:
            $ref: '#/components/schemas/imei'
        config:
          $ref: '#/components/schemas/deviceConfig'
    putBulkEventConfigImeis:
      description: 'The bulk event configuration by IMEI numbers object.'
      type: object
      required:
        - imeis
        - config
      properties:
        imeis:
          description: 'The IMEI numbers. The IMEI number can be found on a sticker on the device itself or on the back of the device box.'
          type: array
          items:
            $ref: '#/components/schemas/imei'
        config:
          $ref: '#/components/schemas/eventConfig'
    putBulkEventConfigGroups:
      description: 'The bulk event configuration by organization object.'
      type: object
      required:
        - organizationId
        - config
      properties:
        organizationId:
          $ref: '#/components/schemas/organizationId'
        groupIds:
          description: 'The group IDs array.'
          type: array
          items:
            $ref: '#/components/schemas/groupId'
        config:
          $ref: '#/components/schemas/eventConfig'
